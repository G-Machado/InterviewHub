{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { changeUser } from \"../store\";\nimport { useFetchQuestionsQuery, useFetchSubmissionQuery, useFetchUserQuery, setupSubmission, loadQuestionsData, setUserField } from \"../store\";\nfunction useLoadUser(loginInput) {\n  _s();\n  console.log(\"calling use load user with diferent input\");\n  const [userLogged, setUserLogged] = useState(false);\n  const user = useSelector(state => state.userData);\n  const dispatch = useDispatch();\n  const fetchUser = useFetchUserQuery(loginInput);\n  const fetchSubmission = useFetchSubmissionQuery(user);\n  const fetchQuestions = useFetchQuestionsQuery();\n\n  // Dispatch loaded submission\n  useEffect(() => {\n    if (!fetchSubmission.data || fetchSubmission.isLoading || fetchSubmission.error) return;\n    if (!userLogged) return;\n\n    // When user is created, so is the submission\n    // so we don't need to check for anything\n    console.log(fetchSubmission.data[0]);\n    dispatch(setupSubmission(fetchSubmission.data[0]));\n    console.log('loaded submission to slice');\n    return;\n  }, [fetchSubmission.data]);\n\n  // Filter and dispatch loaded user questions\n  useEffect(() => {\n    if (!fetchQuestions.data) return;\n    if (!userLogged) return;\n    let filteredQuestions = [];\n    fetchQuestions.data.map(question => {\n      console.log(user);\n      user.questionsId.map(id => {\n        if (id == question.id) {\n          filteredQuestions.push(question);\n        }\n      });\n    });\n    dispatch(loadQuestionsData(filteredQuestions));\n    console.log('loaded filtered questions to slice');\n    if (!user.startedExam) {\n      const newDate = new Date();\n      const startTime = `${newDate.getDate()}/${newDate.getMonth() + 1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n      dispatch(setUserField({\n        key: \"startedExam\",\n        value: true\n      }));\n      dispatch(setUserField({\n        key: \"examStartTime\",\n        value: startTime\n      }));\n    }\n    return ';';\n  }, [fetchQuestions.data]);\n\n  // Dispatch loaded user data\n  useEffect(() => {\n    console.log(loginInput);\n    if (!fetchUser.data || fetchUser.isLoading || fetchUser.error || loginInput != \"\") return;\n    dispatch(changeUser(fetchUser.data));\n    console.log(`loaded user: ${fetchUser.data[0]}`);\n\n    // setUserLogged(true);\n    return;\n  }, [fetchUser.data]);\n  return () => [fetchUser.isLoading, fetchUser.error];\n}\n_s(useLoadUser, \"RrNG/NipdAs692RRd+TW+4TRDZo=\", false, function () {\n  return [useSelector, useDispatch, useFetchUserQuery, useFetchSubmissionQuery, useFetchQuestionsQuery];\n});\nexport default useLoadUser;","map":{"version":3,"names":["useDispatch","useSelector","useEffect","useState","changeUser","useFetchQuestionsQuery","useFetchSubmissionQuery","useFetchUserQuery","setupSubmission","loadQuestionsData","setUserField","useLoadUser","loginInput","console","log","userLogged","setUserLogged","user","state","userData","dispatch","fetchUser","fetchSubmission","fetchQuestions","data","isLoading","error","filteredQuestions","map","question","questionsId","id","push","startedExam","newDate","Date","startTime","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","key","value"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Hooks/useLoadUser.js"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { changeUser } from \"../store\";\nimport { \n    useFetchQuestionsQuery, \n    useFetchSubmissionQuery,\n    useFetchUserQuery,\n    setupSubmission,\n    loadQuestionsData,\n    setUserField\n} from \"../store\";\n\nfunction useLoadUser(loginInput)\n{\n    console.log(\"calling use load user with diferent input\");\n    const [userLogged, setUserLogged] = useState(false);\n\n    const user = useSelector(state=>state.userData);\n    const dispatch = useDispatch();\n    const fetchUser = useFetchUserQuery(loginInput);\n    const fetchSubmission = useFetchSubmissionQuery(user);\n    const fetchQuestions = useFetchQuestionsQuery();\n\n    // Dispatch loaded submission\n    useEffect(()=>{\n        if(!fetchSubmission.data || \n            fetchSubmission.isLoading || \n            fetchSubmission.error) return;\n        if(!userLogged) return;\n        \n        // When user is created, so is the submission\n        // so we don't need to check for anything\n        console.log(fetchSubmission.data[0]);\n        dispatch(setupSubmission(fetchSubmission.data[0]));\n        console.log('loaded submission to slice');\n\n        return;\n    }, [fetchSubmission.data]);\n\n    // Filter and dispatch loaded user questions\n    useEffect(() => {\n        if(!fetchQuestions.data)return;\n        if(!userLogged) return;\n        \n\n        let filteredQuestions = [];\n        fetchQuestions.data.map((question) =>\n        {\n            console.log(user);\n            user.questionsId.map((id) => {\n                if(id == question.id) \n                {\n                    filteredQuestions.push(question);\n                }\n            });\n        })\n\n        dispatch(loadQuestionsData(filteredQuestions));\n        console.log('loaded filtered questions to slice');\n        \n        if(!user.startedExam)\n        {\n            const newDate = new Date();\n            const startTime = `${newDate.getDate()}/${newDate.getMonth()+1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n            dispatch(setUserField({key:\"startedExam\", value: true}));\n            dispatch(setUserField({key:\"examStartTime\", value: startTime}));\n        }\n\n        return';'\n    }, [fetchQuestions.data]);    \n\n    // Dispatch loaded user data\n    useEffect(() => {\n        console.log(loginInput);\n        if(!fetchUser.data ||\n        fetchUser.isLoading || \n        fetchUser.error ||\n        loginInput != \"\") return;\n\n        dispatch(changeUser(fetchUser.data));\n        console.log(`loaded user: ${fetchUser.data[0]}`);\n        \n        // setUserLogged(true);\n        return;\n    }, [fetchUser.data]);\n\n    return () => [fetchUser.isLoading, fetchUser.error];\n}\n\nexport default useLoadUser;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}