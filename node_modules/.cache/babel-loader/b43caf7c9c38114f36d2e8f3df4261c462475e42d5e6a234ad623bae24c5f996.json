{"ast":null,"code":"var _jsxFileName = \"/Users/machadogomes/Documents/InterviewHub/question_hub/src/Pages/QuestionsExam.js\",\n  _s = $RefreshSig$();\nimport Link from '../Components/Link';\nimport Question from '../Components/Question';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { SUBMIT_PAGE_PATH, useFetchQuestionsQuery, useFetchSubmissionQuery, loadQuestionsData, setUserField, setupSubmission } from '../store';\nimport useSelectAlternative from '../Hooks/useSelectAlternative';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuestionsExam() {\n  _s();\n  const user = useSelector(state => state.userData);\n  const questionsData = useSelector(state => state.questionsData.data);\n  const {\n    data,\n    qError,\n    qIsLoading\n  } = useFetchQuestionsQuery();\n  const submissionFetch = useFetchSubmissionQuery(user);\n  const dispatch = useDispatch();\n  const selectAlternative = useSelectAlternative();\n\n  // Dispatch loaded submission\n  useEffect(() => {\n    if (!submissionFetch.data || submissionFetch.isLoading || submissionFetch.error) return;\n\n    // When user is created, so is the submission\n    // so we don't need to check for anything\n    dispatch(setupSubmission(submissionFetch.data[0]));\n    submissionFetch.data[0].answers.map(answer => {\n      console.log(answer);\n      selectAlternative({\n        questionId: answer.questionId,\n        answerId: answer.answerId\n      });\n    });\n    return;\n  }, [submissionFetch.data]);\n\n  // Filter and dispatch loaded user questions\n  let filteredQuestions = [];\n  useEffect(() => {\n    if (!data) return;\n\n    // console.log(data);\n    data.map(question => {\n      user.questionsId.map(id => {\n        if (id == question.id) {\n          filteredQuestions.push(question);\n        }\n      });\n    });\n    dispatch(loadQuestionsData(filteredQuestions));\n    if (!user.startedExam) {\n      const newDate = new Date();\n      const startTime = `${newDate.getDate()}/${newDate.getMonth() + 1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n      dispatch(setUserField({\n        key: \"startedExam\",\n        value: true\n      }));\n      dispatch(setUserField({\n        key: \"examStartTime\",\n        value: startTime\n      }));\n    }\n    return;\n  }, [data]);\n\n  // TODO -> display skeleton while loading || display\n  if (qIsLoading || qError) return;\n  const questionsContent = questionsData.map(qObject => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        paddingTop: 5\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          paddingLeft: 15,\n          paddingRight: 15\n        },\n        children: /*#__PURE__*/_jsxDEV(Question, {\n          data: qObject\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)\n    }, qObject.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 16\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        fontSize: 24\n      },\n      children: \"Questions:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), questionsContent, /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        paddingTop: 35,\n        heigth: 40\n      },\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: SUBMIT_PAGE_PATH,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            fontSize: `16px`\n          },\n          children: \"SUBMIT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          paddingTop: 55\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 12\n  }, this);\n}\n_s(QuestionsExam, \"EPOBZueyl7cGTgsXBjZZV1XoaTY=\", false, function () {\n  return [useSelector, useSelector, useFetchQuestionsQuery, useFetchSubmissionQuery, useDispatch, useSelectAlternative];\n});\n_c = QuestionsExam;\nexport default QuestionsExam;\nvar _c;\n$RefreshReg$(_c, \"QuestionsExam\");","map":{"version":3,"names":["Link","Question","useSelector","useDispatch","useEffect","SUBMIT_PAGE_PATH","useFetchQuestionsQuery","useFetchSubmissionQuery","loadQuestionsData","setUserField","setupSubmission","useSelectAlternative","QuestionsExam","user","state","userData","questionsData","data","qError","qIsLoading","submissionFetch","dispatch","selectAlternative","isLoading","error","answers","map","answer","console","log","questionId","answerId","filteredQuestions","question","questionsId","id","push","startedExam","newDate","Date","startTime","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","key","value","questionsContent","qObject","paddingTop","paddingLeft","paddingRight","display","justifyContent","fontSize","heigth"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Pages/QuestionsExam.js"],"sourcesContent":["import Link from '../Components/Link';\nimport Question from '../Components/Question';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { SUBMIT_PAGE_PATH, \n    useFetchQuestionsQuery,\n    useFetchSubmissionQuery,\n    loadQuestionsData,\n    setUserField,\n    setupSubmission\n} from '../store';\nimport useSelectAlternative from '../Hooks/useSelectAlternative';\n\nfunction QuestionsExam()\n{\n    const user = useSelector((state)=> state.userData);\n    const questionsData = useSelector((state)=> state.questionsData.data);\n    const {data, qError, qIsLoading} = useFetchQuestionsQuery();\n    const submissionFetch = useFetchSubmissionQuery(user);\n    const dispatch = useDispatch();\n    const selectAlternative = useSelectAlternative();\n    \n    // Dispatch loaded submission\n    useEffect(()=>{\n        if(!submissionFetch.data || \n            submissionFetch.isLoading || \n            submissionFetch.error) return;\n        \n        // When user is created, so is the submission\n        // so we don't need to check for anything\n        dispatch(setupSubmission(submissionFetch.data[0]));\n        submissionFetch.data[0].answers.map((answer)=>\n        {\n            console.log(answer);\n            selectAlternative({questionId: answer.questionId, answerId: answer.answerId})\n        })\n       \n        return;\n    }, [submissionFetch.data]);\n\n    // Filter and dispatch loaded user questions\n    let filteredQuestions = [];\n    useEffect(() => {\n        if(!data)return;\n\n        // console.log(data);\n        data.map((question) =>\n        {\n            user.questionsId.map((id) => {\n                if(id == question.id) \n                {\n                    filteredQuestions.push(question);\n                }\n            });\n        })\n\n        dispatch(loadQuestionsData(filteredQuestions));\n        \n        if(!user.startedExam)\n        {\n            const newDate = new Date();\n            const startTime = `${newDate.getDate()}/${newDate.getMonth()+1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n            dispatch(setUserField({key:\"startedExam\", value: true}));\n            dispatch(setUserField({key:\"examStartTime\", value: startTime}));\n        }\n        return;\n    }, [data]);\n    \n    \n    // TODO -> display skeleton while loading || display\n    if(qIsLoading || qError) return;\n    \n    const questionsContent = questionsData.map((qObject) => \n    {\n        return <div key={qObject.id} style={{paddingTop: 5}}>\n            <div style={{paddingLeft: 15, paddingRight: 15}}>\n                <Question data={qObject}/>\n            </div>\n        </div>\n    })\n    \n    return <div>\n        <h3 style={{display: 'flex',  justifyContent:'center', fontSize: 24}}>Questions:</h3>\n        {questionsContent}\n        <div style={{display: 'flex', justifyContent:'center',paddingTop: 35, heigth: 40}}>\n            <Link to={SUBMIT_PAGE_PATH}>\n                <button style={{fontSize : `16px`}}>SUBMIT</button>\n            </Link>\n            <div style={{paddingTop: 55}}></div>\n        </div>\n    </div>\n}\n\nexport default QuestionsExam;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}