{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setSubmissionDirty, useUpdateSubmissionMutation } from '../store';\nfunction SubmissionUploader() {\n  _s();\n  const user = useSelector(state => state.userData);\n  const userQuestions = useSelector(state => state.questionsData);\n  const [updateSubmission, updateResults] = useUpdateSubmissionMutation();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (user.id == 0) return;\n    if (!user.startedExam) return;\n    let answers = [];\n    const submission = {\n      id: user.id,\n      answers: answers\n    };\n    userQuestions.data.map(question => {\n      answers.push({\n        id: question.id,\n        answerId: question.userAnswerId || 0\n      });\n    });\n    updateSubmission(submission);\n    console.log(\"Updated submission after mutation\");\n    dispatch(setSubmissionDirty({\n      value: false\n    }));\n  }, [userQuestions]);\n}\n_s(SubmissionUploader, \"f9ScngIH+a69GKPgaYImbMI5v7s=\", false, function () {\n  return [useSelector, useSelector, useUpdateSubmissionMutation, useDispatch];\n});\n_c = SubmissionUploader;\nexport default SubmissionUploader;\nvar _c;\n$RefreshReg$(_c, \"SubmissionUploader\");","map":{"version":3,"names":["useEffect","useSelector","useDispatch","setSubmissionDirty","useUpdateSubmissionMutation","SubmissionUploader","user","state","userData","userQuestions","questionsData","updateSubmission","updateResults","dispatch","id","startedExam","answers","submission","data","map","question","push","answerId","userAnswerId","console","log","value"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Effects/SubmissionUploader.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setSubmissionDirty, useUpdateSubmissionMutation } from '../store';\n\nfunction SubmissionUploader()\n{\n    const user = useSelector(state => state.userData);\n    const userQuestions = useSelector((state)=>state.questionsData);\n    const [updateSubmission, updateResults] = useUpdateSubmissionMutation();\n    const dispatch = useDispatch();\n    \n    useEffect(()=>{\n\n        if(user.id == 0) return;\n        if(!user.startedExam) return;\n\n        let answers = [];\n        const submission = {id: user.id, answers: answers};\n        userQuestions.data.map((question) =>\n        {\n            answers.push({id: question.id, answerId: question.userAnswerId || 0});\n        })\n\n        updateSubmission(submission);\n        console.log(\"Updated submission after mutation\");\n        dispatch(setSubmissionDirty({value: false}));\n\n    }, [userQuestions]);\n}\n\nexport default SubmissionUploader;"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,kBAAkB,EAAEC,2BAA2B,QAAQ,UAAU;AAE1E,SAASC,kBAAkB,GAC3B;EAAA;EACI,MAAMC,IAAI,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAAC;EACjD,MAAMC,aAAa,GAAGR,WAAW,CAAEM,KAAK,IAAGA,KAAK,CAACG,aAAa,CAAC;EAC/D,MAAM,CAACC,gBAAgB,EAAEC,aAAa,CAAC,GAAGR,2BAA2B,EAAE;EACvE,MAAMS,QAAQ,GAAGX,WAAW,EAAE;EAE9BF,SAAS,CAAC,MAAI;IAEV,IAAGM,IAAI,CAACQ,EAAE,IAAI,CAAC,EAAE;IACjB,IAAG,CAACR,IAAI,CAACS,WAAW,EAAE;IAEtB,IAAIC,OAAO,GAAG,EAAE;IAChB,MAAMC,UAAU,GAAG;MAACH,EAAE,EAAER,IAAI,CAACQ,EAAE;MAAEE,OAAO,EAAEA;IAAO,CAAC;IAClDP,aAAa,CAACS,IAAI,CAACC,GAAG,CAAEC,QAAQ,IAChC;MACIJ,OAAO,CAACK,IAAI,CAAC;QAACP,EAAE,EAAEM,QAAQ,CAACN,EAAE;QAAEQ,QAAQ,EAAEF,QAAQ,CAACG,YAAY,IAAI;MAAC,CAAC,CAAC;IACzE,CAAC,CAAC;IAEFZ,gBAAgB,CAACM,UAAU,CAAC;IAC5BO,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAChDZ,QAAQ,CAACV,kBAAkB,CAAC;MAACuB,KAAK,EAAE;IAAK,CAAC,CAAC,CAAC;EAEhD,CAAC,EAAE,CAACjB,aAAa,CAAC,CAAC;AACvB;AAAC,GAxBQJ,kBAAkB;EAAA,QAEVJ,WAAW,EACFA,WAAW,EACSG,2BAA2B,EACpDF,WAAW;AAAA;AAAA,KALvBG,kBAAkB;AA0B3B,eAAeA,kBAAkB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}