{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { changeUser } from \"../store\";\nimport { useFetchQuestionsQuery, useFetchSubmissionQuery, useFetchUserQuery, setupSubmission, loadQuestionsData } from \"../store\";\nimport useSetUserField from \"./useSetUserField\";\nfunction useLoadUser(loginInput) {\n  _s();\n  const dispatch = useDispatch();\n  const [loginError, setLoginError] = useState(false);\n  const fetchUser = useFetchUserQuery(loginInput);\n  const user = useSelector(state => state.userData);\n\n  // Dispatch loaded user data\n  useEffect(() => {\n    if (fetchUser.isFetching || fetchUser.isLoading || fetchUser.error || loginInput == '' || user) return;\n    console.log(user);\n    if (fetchUser.isSuccess && fetchUser.data.length <= 0) {\n      setLoginError(true);\n      return;\n    }\n    console.log(fetchUser.data[0]);\n    dispatch(changeUser(fetchUser.data[0]));\n    return;\n  });\n\n  // const fetchSubmission = useFetchSubmissionQuery(user);\n  // const fetchQuestions = useFetchQuestionsQuery(user);\n\n  // const setUserField = useSetUserField();\n\n  // // Dispatch loaded submission\n  // useEffect(()=>{\n  //     if(!fetchSubmission.data) return;\n  //     if(!userLogged) return;\n\n  //     // When user is created, so is the submission\n  //     // so we don't need to check for anything\n  //     dispatch(setupSubmission(fetchSubmission.data[0]));\n  //     console.log('loaded submission to slice');\n  //     // console.log(fetchSubmission);\n\n  // }, [fetchSubmission]);\n\n  // // Filter and dispatch loaded user questions\n  // useEffect(() => {\n  //     if(!fetchQuestions.data)return;\n\n  //     let filteredQuestions = [];\n  //     fetchQuestions.data.map((question) =>\n  //     {\n  //         user.questionsId.map((id) => {\n  //             if(id == question.id) \n  //             {\n  //                 filteredQuestions.push(question);\n  //             }\n  //         });\n  //     })\n\n  //     dispatch(loadQuestionsData(filteredQuestions));\n  //     // console.log('loaded filtered questions to slice');\n\n  //     if(!user.startedExam)\n  //     {\n  //         const newDate = new Date();\n  //         const startTime = `${newDate.getDate()}/${newDate.getMonth()+1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n\n  //         setUserField(\"startedExam\", true);\n  //         setUserField(\"examStartTime\", startTime);\n  //     }\n\n  //     return;\n  // }, [user, fetchQuestions]);    \n\n  return [fetchUser.isLoading, loginError];\n}\n_s(useLoadUser, \"20Mi6FAR4CIYRH+nLvm2laAwiyI=\", false, function () {\n  return [useDispatch, useFetchUserQuery, useSelector];\n});\nexport default useLoadUser;","map":{"version":3,"names":["useDispatch","useSelector","useEffect","useState","changeUser","useFetchQuestionsQuery","useFetchSubmissionQuery","useFetchUserQuery","setupSubmission","loadQuestionsData","useSetUserField","useLoadUser","loginInput","dispatch","loginError","setLoginError","fetchUser","user","state","userData","isFetching","isLoading","error","console","log","isSuccess","data","length"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Hooks/useLoadUser.js"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { changeUser } from \"../store\";\nimport { \n    useFetchQuestionsQuery, \n    useFetchSubmissionQuery,\n    useFetchUserQuery,\n    setupSubmission,\n    loadQuestionsData\n} from \"../store\";\nimport useSetUserField from \"./useSetUserField\";\n\nfunction useLoadUser(loginInput)\n{\n    const dispatch = useDispatch();\n    const [loginError, setLoginError] = useState(false);\n    const fetchUser = useFetchUserQuery(loginInput);\n    const user = useSelector(state=>state.userData);\n\n    // Dispatch loaded user data\n    useEffect(() => {\n        if(fetchUser.isFetching  ||\n        fetchUser.isLoading || \n        fetchUser.error || \n        loginInput == '' || \n        user) return;\n\n        console.log(user);\n\n        if(fetchUser.isSuccess && fetchUser.data.length <= 0){\n            setLoginError(true);\n            return;\n        }\n            \n        console.log(fetchUser.data[0]);\n        dispatch(changeUser(fetchUser.data[0]));\n        \n        return;\n    });\n\n    // const fetchSubmission = useFetchSubmissionQuery(user);\n    // const fetchQuestions = useFetchQuestionsQuery(user);\n\n\n    // const setUserField = useSetUserField();\n\n    // // Dispatch loaded submission\n    // useEffect(()=>{\n    //     if(!fetchSubmission.data) return;\n    //     if(!userLogged) return;\n        \n    //     // When user is created, so is the submission\n    //     // so we don't need to check for anything\n    //     dispatch(setupSubmission(fetchSubmission.data[0]));\n    //     console.log('loaded submission to slice');\n    //     // console.log(fetchSubmission);\n\n    // }, [fetchSubmission]);\n\n    // // Filter and dispatch loaded user questions\n    // useEffect(() => {\n    //     if(!fetchQuestions.data)return;\n        \n    //     let filteredQuestions = [];\n    //     fetchQuestions.data.map((question) =>\n    //     {\n    //         user.questionsId.map((id) => {\n    //             if(id == question.id) \n    //             {\n    //                 filteredQuestions.push(question);\n    //             }\n    //         });\n    //     })\n\n    //     dispatch(loadQuestionsData(filteredQuestions));\n    //     // console.log('loaded filtered questions to slice');\n        \n    //     if(!user.startedExam)\n    //     {\n    //         const newDate = new Date();\n    //         const startTime = `${newDate.getDate()}/${newDate.getMonth()+1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n\n    //         setUserField(\"startedExam\", true);\n    //         setUserField(\"examStartTime\", startTime);\n    //     }\n\n    //     return;\n    // }, [user, fetchQuestions]);    \n\n    \n\n    return [fetchUser.isLoading, loginError];\n}\n\nexport default useLoadUser;"],"mappings":";AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,UAAU;AACrC,SACIC,sBAAsB,EACtBC,uBAAuB,EACvBC,iBAAiB,EACjBC,eAAe,EACfC,iBAAiB,QACd,UAAU;AACjB,OAAOC,eAAe,MAAM,mBAAmB;AAE/C,SAASC,WAAW,CAACC,UAAU,EAC/B;EAAA;EACI,MAAMC,QAAQ,GAAGb,WAAW,EAAE;EAC9B,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAMa,SAAS,GAAGT,iBAAiB,CAACK,UAAU,CAAC;EAC/C,MAAMK,IAAI,GAAGhB,WAAW,CAACiB,KAAK,IAAEA,KAAK,CAACC,QAAQ,CAAC;;EAE/C;EACAjB,SAAS,CAAC,MAAM;IACZ,IAAGc,SAAS,CAACI,UAAU,IACvBJ,SAAS,CAACK,SAAS,IACnBL,SAAS,CAACM,KAAK,IACfV,UAAU,IAAI,EAAE,IAChBK,IAAI,EAAE;IAENM,OAAO,CAACC,GAAG,CAACP,IAAI,CAAC;IAEjB,IAAGD,SAAS,CAACS,SAAS,IAAIT,SAAS,CAACU,IAAI,CAACC,MAAM,IAAI,CAAC,EAAC;MACjDZ,aAAa,CAAC,IAAI,CAAC;MACnB;IACJ;IAEAQ,OAAO,CAACC,GAAG,CAACR,SAAS,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9Bb,QAAQ,CAACT,UAAU,CAACY,SAAS,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAEvC;EACJ,CAAC,CAAC;;EAEF;EACA;;EAGA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAIA,OAAO,CAACV,SAAS,CAACK,SAAS,EAAEP,UAAU,CAAC;AAC5C;AAAC,GAhFQH,WAAW;EAAA,QAECX,WAAW,EAEVO,iBAAiB,EACtBN,WAAW;AAAA;AA6E5B,eAAeU,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}