{"ast":null,"code":"var _jsxFileName = \"/Users/machadogomes/Documents/InterviewHub/question_hub/src/Components/ExamTimer.js\",\n  _s = $RefreshSig$();\nimport { useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst currentTimeLeft = user => {\n  const date = new Date();\n  const currentTime = `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()}-${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n  const startTime = user.startedExam;\n  console.log(user.examStartTime);\n  const startHour = parseInt(startTime.split(\"-\")[1].split(\":\")[0]);\n  const startMinute = parseInt(startTime.split(\"-\")[1].split(\":\")[1]);\n  const startSecond = parseInt(startTime.split(\"-\")[1].split(\":\")[2]);\n  const startDay = parseInt(startTime.split(\"-\")[0].split(\"/\")[0]);\n  const deltaSeconds = date.getSeconds() < startSecond ? date.getSeconds() : date.getSeconds() - startSecond;\n  const deltaMinutes = date.getMinutes() < startMinute ? date.getMinutes() : date.getMinutes() - startMinute;\n  const deltaHours = date.getHours() < startHour ? date.getHours() : date.getHours() - startHour;\n  const deltaDays = date.getDate() < startDay ? date.getDate() : date.getDate() - startDay;\n  const deltaTime = deltaSeconds + deltaMinutes * 60 + deltaHours * 3600;\n  const timeLeft = 30 * 60 - deltaTime;\n  return timeLeft;\n};\nfunction ExamTimer(_ref) {\n  _s();\n  let {\n    handleTimeOver\n  } = _ref;\n  const [date, setDate] = useState(new Date());\n  const [refresh, setRefresh] = useState(false);\n  const user = useSelector(state => state.userData);\n  const timeLeft = currentTimeLeft(user);\n\n  // let deltaTimeDisplay = `${parseInt(deltaTime/3600)}:${parseInt(deltaTime/60)}:${parseInt(deltaTime%60)}`;\n  let timeLeftDisplay = `${parseInt(timeLeft / 3600)}:${parseInt(timeLeft / 60)}:${parseInt(timeLeft % 60)}`;\n\n  // Updates component every second\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: timeLeftDisplay\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 12\n  }, this);\n}\n_s(ExamTimer, \"/+o98ffNjUsaQkokHkPpANwUfFs=\", false, function () {\n  return [useSelector];\n});\n_c = ExamTimer;\nexport default ExamTimer;\nexport { currentTimeLeft };\nvar _c;\n$RefreshReg$(_c, \"ExamTimer\");","map":{"version":3,"names":["useSelector","useEffect","useState","currentTimeLeft","user","date","Date","currentTime","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","startTime","startedExam","console","log","examStartTime","startHour","parseInt","split","startMinute","startSecond","startDay","deltaSeconds","deltaMinutes","deltaHours","deltaDays","deltaTime","timeLeft","ExamTimer","handleTimeOver","setDate","refresh","setRefresh","state","userData","timeLeftDisplay","interval","setInterval","clearInterval"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Components/ExamTimer.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\n\nconst currentTimeLeft = (user)=> {\n       \n    const date = new Date();\n    const currentTime = `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}-${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n    const startTime = user.startedExam;\n    \n    console.log(user.examStartTime);\n    const startHour = parseInt(startTime.split(\"-\")[1].split(\":\")[0]);\n    const startMinute = parseInt(startTime.split(\"-\")[1].split(\":\")[1]);\n    const startSecond = parseInt(startTime.split(\"-\")[1].split(\":\")[2]);\n    const startDay = parseInt(startTime.split(\"-\")[0].split(\"/\")[0]);\n    \n    const deltaSeconds = date.getSeconds() < startSecond ? date.getSeconds() : date.getSeconds() - startSecond;\n    const deltaMinutes = date.getMinutes() < startMinute ? date.getMinutes() : date.getMinutes() - startMinute;\n    const deltaHours = date.getHours() < startHour ? date.getHours() : date.getHours() - startHour;\n    const deltaDays =  date.getDate() < startDay ? date.getDate() : date.getDate() - startDay;\n    \n    const deltaTime = deltaSeconds + deltaMinutes * 60 + deltaHours * 3600;\n    const timeLeft = 30 * 60 - deltaTime;\n\n    return timeLeft;\n}\n\nfunction ExamTimer({handleTimeOver})\n{\n    const [date, setDate] = useState(new Date());\n    const [refresh, setRefresh] = useState(false);\n    const user = useSelector(state => state.userData);\n\n    const timeLeft = currentTimeLeft(user);\n\n    // let deltaTimeDisplay = `${parseInt(deltaTime/3600)}:${parseInt(deltaTime/60)}:${parseInt(deltaTime%60)}`;\n    let timeLeftDisplay = `${parseInt(timeLeft/3600)}:${parseInt(timeLeft/60)}:${parseInt(timeLeft%60)}`;\n\n    // Updates component every second\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setDate(new Date);\n        }, 1000);\n        \n        return () => clearInterval(interval);\n    }, []);\n    \n    return <div>{timeLeftDisplay}</div>\n}\n\nexport default ExamTimer;\nexport {currentTimeLeft};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}