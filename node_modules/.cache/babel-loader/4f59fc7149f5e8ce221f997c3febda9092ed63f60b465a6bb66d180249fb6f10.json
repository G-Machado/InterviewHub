{"ast":null,"code":"var _jsxFileName = \"/Users/machadogomes/Documents/InterviewHub/question_hub/src/Components/ExamTimer.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst currentTimeLeft = _ref => {\n  _s();\n  let {\n    user\n  } = _ref;\n  const [date, setDate] = useState(new Date());\n  const startTime = user.examStartTime; // format: \"dd/mm/yyyy-hh:mm:ss\"\n\n  const startHour = parseInt(startTime.split(\"-\")[1].split(\":\")[0]);\n  const startMinute = parseInt(startTime.split(\"-\")[1].split(\":\")[1]);\n  const startSecond = parseInt(startTime.split(\"-\")[1].split(\":\")[2]);\n  const startDay = parseInt(startTime.split(\"-\")[0].split(\"/\")[0]);\n  const deltaSeconds = date.getSeconds() < startSecond ? date.getSeconds() : date.getSeconds() - startSecond;\n  const deltaMinutes = date.getMinutes() < startMinute ? date.getMinutes() : date.getMinutes() - startMinute;\n  const deltaHours = date.getHours() < startHour ? date.getHours() : date.getHours() - startHour;\n  const deltaDays = date.getDate() < startDay ? date.getDate() : date.getDate() - startDay;\n  const deltaTime = deltaSeconds + deltaMinutes * 60 + deltaHours * 3600;\n  const timeLeft = 30 * 60 - deltaTime;\n  return timeLeft;\n};\n_s(currentTimeLeft, \"rW+rxy2mJ1oFEB1Cqg4Z2uVJym0=\");\nfunction ExamTimer(_ref2) {\n  _s2();\n  let {\n    handleTimeOver\n  } = _ref2;\n  const user = useSelector(state => state.userData);\n  const timeLeft = currentTimeLeft({\n    user: user,\n    date: date\n  });\n\n  // let deltaTimeDisplay = `${parseInt(deltaTime/3600)}:${parseInt(deltaTime/60)}:${parseInt(deltaTime%60)}`;\n  let timeLeftDisplay = `${parseInt(currentTimeLeft / 3600)}:${parseInt(currentTimeLeft / 60)}:${parseInt(currentTimeLeft % 60)}`;\n  const dateTime = date.toLocaleTimeString();\n  // Updates component every second\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  if (timeLeft <= 0) {\n    timeLeftDisplay = \"time over\";\n    return handleTimeOver();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: timeLeftDisplay\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 12\n  }, this);\n}\n_s2(ExamTimer, \"w5+LAD8lLDhLgasoS8hF5Z9czWg=\", false, function () {\n  return [useSelector];\n});\n_c = ExamTimer;\nexport default ExamTimer;\nexport { currentTimeLeft };\nvar _c;\n$RefreshReg$(_c, \"ExamTimer\");","map":{"version":3,"names":["useSelector","useEffect","useState","currentTimeLeft","user","date","setDate","Date","startTime","examStartTime","startHour","parseInt","split","startMinute","startSecond","startDay","deltaSeconds","getSeconds","deltaMinutes","getMinutes","deltaHours","getHours","deltaDays","getDate","deltaTime","timeLeft","ExamTimer","handleTimeOver","state","userData","timeLeftDisplay","dateTime","toLocaleTimeString","interval","setInterval","clearInterval"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Components/ExamTimer.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\n\nconst currentTimeLeft = ({user})=> {\n       \n    const [date, setDate] = useState(new Date());\n    const startTime = user.examStartTime; // format: \"dd/mm/yyyy-hh:mm:ss\"\n    \n    const startHour = parseInt(startTime.split(\"-\")[1].split(\":\")[0]);\n    const startMinute = parseInt(startTime.split(\"-\")[1].split(\":\")[1]);\n    const startSecond = parseInt(startTime.split(\"-\")[1].split(\":\")[2]);\n    const startDay = parseInt(startTime.split(\"-\")[0].split(\"/\")[0]);\n    \n    const deltaSeconds = date.getSeconds() < startSecond ? date.getSeconds() : date.getSeconds() - startSecond;\n    const deltaMinutes = date.getMinutes() < startMinute ? date.getMinutes() : date.getMinutes() - startMinute;\n    const deltaHours = date.getHours() < startHour ? date.getHours() : date.getHours() - startHour;\n    const deltaDays =  date.getDate() < startDay ? date.getDate() : date.getDate() - startDay;\n    \n    const deltaTime = deltaSeconds + deltaMinutes * 60 + deltaHours * 3600;\n    const timeLeft = 30 * 60 - deltaTime;\n\n    return timeLeft;\n}\n\nfunction ExamTimer({handleTimeOver})\n{\n    const user = useSelector(state => state.userData);\n\n    const timeLeft = currentTimeLeft({user:user, date:date});\n\n    // let deltaTimeDisplay = `${parseInt(deltaTime/3600)}:${parseInt(deltaTime/60)}:${parseInt(deltaTime%60)}`;\n    let timeLeftDisplay = `${parseInt(currentTimeLeft/3600)}:${parseInt(currentTimeLeft/60)}:${parseInt(currentTimeLeft%60)}`;\n\n    const dateTime =date.toLocaleTimeString();\n    // Updates component every second\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setDate(new Date());\n        }, 1000);\n        \n        return () => clearInterval(interval);\n    }, []);\n    \n    if(timeLeft <= 0) {\n        timeLeftDisplay = \"time over\";\n        return handleTimeOver();\n    }\n\n    return <div>{timeLeftDisplay}</div>\n}\n\nexport default ExamTimer;\nexport {currentTimeLeft};"],"mappings":";;;AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAE5C,MAAMC,eAAe,GAAG,QAAW;EAAA;EAAA,IAAV;IAACC;EAAI,CAAC;EAE3B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,IAAIK,IAAI,EAAE,CAAC;EAC5C,MAAMC,SAAS,GAAGJ,IAAI,CAACK,aAAa,CAAC,CAAC;;EAEtC,MAAMC,SAAS,GAAGC,QAAQ,CAACH,SAAS,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACjE,MAAMC,WAAW,GAAGF,QAAQ,CAACH,SAAS,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACnE,MAAME,WAAW,GAAGH,QAAQ,CAACH,SAAS,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACnE,MAAMG,QAAQ,GAAGJ,QAAQ,CAACH,SAAS,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAEhE,MAAMI,YAAY,GAAGX,IAAI,CAACY,UAAU,EAAE,GAAGH,WAAW,GAAGT,IAAI,CAACY,UAAU,EAAE,GAAGZ,IAAI,CAACY,UAAU,EAAE,GAAGH,WAAW;EAC1G,MAAMI,YAAY,GAAGb,IAAI,CAACc,UAAU,EAAE,GAAGN,WAAW,GAAGR,IAAI,CAACc,UAAU,EAAE,GAAGd,IAAI,CAACc,UAAU,EAAE,GAAGN,WAAW;EAC1G,MAAMO,UAAU,GAAGf,IAAI,CAACgB,QAAQ,EAAE,GAAGX,SAAS,GAAGL,IAAI,CAACgB,QAAQ,EAAE,GAAGhB,IAAI,CAACgB,QAAQ,EAAE,GAAGX,SAAS;EAC9F,MAAMY,SAAS,GAAIjB,IAAI,CAACkB,OAAO,EAAE,GAAGR,QAAQ,GAAGV,IAAI,CAACkB,OAAO,EAAE,GAAGlB,IAAI,CAACkB,OAAO,EAAE,GAAGR,QAAQ;EAEzF,MAAMS,SAAS,GAAGR,YAAY,GAAGE,YAAY,GAAG,EAAE,GAAGE,UAAU,GAAG,IAAI;EACtE,MAAMK,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAGD,SAAS;EAEpC,OAAOC,QAAQ;AACnB,CAAC;AAAA,GAnBKtB,eAAe;AAqBrB,SAASuB,SAAS,QAClB;EAAA;EAAA,IADmB;IAACC;EAAc,CAAC;EAE/B,MAAMvB,IAAI,GAAGJ,WAAW,CAAC4B,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAAC;EAEjD,MAAMJ,QAAQ,GAAGtB,eAAe,CAAC;IAACC,IAAI,EAACA,IAAI;IAAEC,IAAI,EAACA;EAAI,CAAC,CAAC;;EAExD;EACA,IAAIyB,eAAe,GAAI,GAAEnB,QAAQ,CAACR,eAAe,GAAC,IAAI,CAAE,IAAGQ,QAAQ,CAACR,eAAe,GAAC,EAAE,CAAE,IAAGQ,QAAQ,CAACR,eAAe,GAAC,EAAE,CAAE,EAAC;EAEzH,MAAM4B,QAAQ,GAAE1B,IAAI,CAAC2B,kBAAkB,EAAE;EACzC;EACA/B,SAAS,CAAC,MAAM;IACZ,MAAMgC,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/B5B,OAAO,CAAC,IAAIC,IAAI,EAAE,CAAC;IACvB,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM4B,aAAa,CAACF,QAAQ,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,IAAGR,QAAQ,IAAI,CAAC,EAAE;IACdK,eAAe,GAAG,WAAW;IAC7B,OAAOH,cAAc,EAAE;EAC3B;EAEA,oBAAO;IAAA,UAAMG;EAAe;IAAA;IAAA;IAAA;EAAA,QAAO;AACvC;AAAC,IAzBQJ,SAAS;EAAA,QAED1B,WAAW;AAAA;AAAA,KAFnB0B,SAAS;AA2BlB,eAAeA,SAAS;AACxB,SAAQvB,eAAe;AAAE;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}