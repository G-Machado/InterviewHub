{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst userApi = createApi({\n  reducerPath: 'user',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:3005'\n  }),\n  endpoints(builder) {\n    return {\n      fetchUser: builder.query({\n        query: email => {\n          if (mail == '') return;\n          return {\n            url: '/users',\n            params: {\n              email: email\n            },\n            method: 'GET'\n          };\n        }\n      }),\n      uploadUser: builder.mutation({\n        query: user => {\n          return {\n            url: `/users/${user.id}`,\n            body: {\n              id: user.id,\n              email: user.email,\n              questionsId: user.questionsId,\n              confirmedMail: user.confirmedMail,\n              submitedExam: user.submitedExam,\n              startedExam: user.startedExam,\n              examStartTime: user.examStartTime\n            },\n            method: 'PATCH'\n          };\n        }\n      })\n    };\n  }\n});\nexport const {\n  useFetchUserQuery,\n  useUploadUserMutation\n} = userApi;\nexport { userApi };","map":{"version":3,"names":["createApi","fetchBaseQuery","userApi","reducerPath","baseQuery","baseUrl","endpoints","builder","fetchUser","query","email","mail","url","params","method","uploadUser","mutation","user","id","body","questionsId","confirmedMail","submitedExam","startedExam","examStartTime","useFetchUserQuery","useUploadUserMutation"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/store/apis/userApi.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nconst userApi = createApi({\n    reducerPath: 'user',\n    baseQuery: fetchBaseQuery({\n        baseUrl: 'http://localhost:3005'\n    }),\n    endpoints(builder){\n        return{\n            fetchUser: builder.query({\n                query: (email) => {\n                    if(mail == '') return;\n                    return{\n                        url: '/users',\n                        params: {\n                            email: email\n                        },\n                        method: 'GET',\n                    };\n                }\n            }),\n            uploadUser: builder.mutation({\n                query: (user) => {\n                    return{\n                        url: `/users/${user.id}`,\n                        body: {\n                            id: user.id,\n                            email: user.email,\n                            questionsId: user.questionsId,\n                            confirmedMail: user.confirmedMail,\n                            submitedExam: user.submitedExam,\n                            startedExam: user.startedExam,\n                            examStartTime: user.examStartTime\n                        },\n                        method: 'PATCH',\n                    };\n                }\n            })\n        };\n    }\n})\n\nexport const { useFetchUserQuery, useUploadUserMutation } = userApi;\nexport { userApi };"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,MAAMC,OAAO,GAAGF,SAAS,CAAC;EACtBG,WAAW,EAAE,MAAM;EACnBC,SAAS,EAAEH,cAAc,CAAC;IACtBI,OAAO,EAAE;EACb,CAAC,CAAC;EACFC,SAAS,CAACC,OAAO,EAAC;IACd,OAAM;MACFC,SAAS,EAAED,OAAO,CAACE,KAAK,CAAC;QACrBA,KAAK,EAAGC,KAAK,IAAK;UACd,IAAGC,IAAI,IAAI,EAAE,EAAE;UACf,OAAM;YACFC,GAAG,EAAE,QAAQ;YACbC,MAAM,EAAE;cACJH,KAAK,EAAEA;YACX,CAAC;YACDI,MAAM,EAAE;UACZ,CAAC;QACL;MACJ,CAAC,CAAC;MACFC,UAAU,EAAER,OAAO,CAACS,QAAQ,CAAC;QACzBP,KAAK,EAAGQ,IAAI,IAAK;UACb,OAAM;YACFL,GAAG,EAAG,UAASK,IAAI,CAACC,EAAG,EAAC;YACxBC,IAAI,EAAE;cACFD,EAAE,EAAED,IAAI,CAACC,EAAE;cACXR,KAAK,EAAEO,IAAI,CAACP,KAAK;cACjBU,WAAW,EAAEH,IAAI,CAACG,WAAW;cAC7BC,aAAa,EAAEJ,IAAI,CAACI,aAAa;cACjCC,YAAY,EAAEL,IAAI,CAACK,YAAY;cAC/BC,WAAW,EAAEN,IAAI,CAACM,WAAW;cAC7BC,aAAa,EAAEP,IAAI,CAACO;YACxB,CAAC;YACDV,MAAM,EAAE;UACZ,CAAC;QACL;MACJ,CAAC;IACL,CAAC;EACL;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEW,iBAAiB;EAAEC;AAAsB,CAAC,GAAGxB,OAAO;AACnE,SAASA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}