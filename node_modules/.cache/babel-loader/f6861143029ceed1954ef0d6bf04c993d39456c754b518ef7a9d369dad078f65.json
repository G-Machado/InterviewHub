{"ast":null,"code":"var _jsxFileName = \"/Users/machadogomes/Documents/InterviewHub/question_hub/src/Components/ExamTimer.js\",\n  _s = $RefreshSig$();\nimport { useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport useChangePage from \"../Hooks/useChangePage\";\nimport { WAIT_PAGE_PATH } from \"../store\";\n\n// Calculates and returns total exam time left in seconds\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst currentTimeLeft = user => {\n  const date = new Date();\n  const startTime = user.examStartTime;\n\n  // Parse exam start time\n  const startHour = parseInt(startTime.split(\"-\")[1].split(\":\")[0]);\n  const startMinute = parseInt(startTime.split(\"-\")[1].split(\":\")[1]);\n  const startSecond = parseInt(startTime.split(\"-\")[1].split(\":\")[2]);\n  const startDay = parseInt(startTime.split(\"-\")[0].split(\"/\")[0]);\n\n  // Calculates time spent\n  const deltaSeconds = date.getSeconds() < startSecond ? date.getSeconds() : date.getSeconds() - startSecond;\n  const deltaMinutes = date.getMinutes() < startMinute ? date.getMinutes() : date.getMinutes() - startMinute;\n  const deltaHours = date.getHours() < startHour ? date.getHours() : date.getHours() - startHour;\n  const deltaDays = date.getDate() < startDay ? date.getDate() : date.getDate() - startDay;\n\n  // Calculates time left in seconds subtracting from exam duration in seconds\n  const examDuration = 30; //30 * 60;       // TODO -> fetch exam duration by user.exam.duration\n  const deltaTime = deltaSeconds + deltaMinutes * 60 + deltaHours * 3600;\n  let timeLeft = examDuration - deltaTime;\n\n  // If more than one day has passed, the time left is definitely over\n  if (deltaDays > 0) {\n    timeLeft = -1;\n  }\n  return timeLeft;\n};\nfunction ExamTimer() {\n  _s();\n  const [date, setDate] = useState(new Date());\n  const user = useSelector(state => state.userData);\n\n  // Calculates exam time left and converts to display format\n  const timeLeft = currentTimeLeft(user);\n  const hoursLeftText = parseInt(timeLeft / 3600) < 10 ? `0${parseInt(timeLeft / 3600)}` : parseInt(timeLeft / 3600);\n  const minutesLeftText = parseInt(timeLeft / 60) < 10 ? `0${parseInt(timeLeft / 60)}` : parseInt(timeLeft / 60);\n  const secondsLeftText = parseInt(timeLeft % 60) < 10 ? `0${parseInt(timeLeft % 60)}` : parseInt(timeLeft % 60);\n  let timeLeftDisplay = `${hoursLeftText}:${minutesLeftText}:${secondsLeftText}`;\n\n  // Updates component every second\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [date]);\n  const changePage = useChangePage();\n  if (timeLeft < 0) {\n    changePage(WAIT_PAGE_PATH);\n    return;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'block'\n    },\n    children: timeLeftDisplay\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 12\n  }, this);\n}\n_s(ExamTimer, \"UBWOzyS3FM+ZA6Xe7WCEx6H/m8g=\", false, function () {\n  return [useSelector, useChangePage];\n});\n_c = ExamTimer;\nexport default ExamTimer;\nexport { currentTimeLeft };\nvar _c;\n$RefreshReg$(_c, \"ExamTimer\");","map":{"version":3,"names":["useSelector","useEffect","useState","useChangePage","WAIT_PAGE_PATH","currentTimeLeft","user","date","Date","startTime","examStartTime","startHour","parseInt","split","startMinute","startSecond","startDay","deltaSeconds","getSeconds","deltaMinutes","getMinutes","deltaHours","getHours","deltaDays","getDate","examDuration","deltaTime","timeLeft","ExamTimer","setDate","state","userData","hoursLeftText","minutesLeftText","secondsLeftText","timeLeftDisplay","interval","setInterval","clearInterval","changePage","display"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Components/ExamTimer.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport useChangePage from \"../Hooks/useChangePage\";\nimport { WAIT_PAGE_PATH } from \"../store\";\n\n// Calculates and returns total exam time left in seconds\nconst currentTimeLeft = (user)=> {\n       \n    const date = new Date();\n    const startTime = user.examStartTime;\n    \n    // Parse exam start time\n    const startHour = parseInt(startTime.split(\"-\")[1].split(\":\")[0]);\n    const startMinute = parseInt(startTime.split(\"-\")[1].split(\":\")[1]);\n    const startSecond = parseInt(startTime.split(\"-\")[1].split(\":\")[2]);\n    const startDay = parseInt(startTime.split(\"-\")[0].split(\"/\")[0]);\n    \n    // Calculates time spent\n    const deltaSeconds = date.getSeconds() < startSecond ? date.getSeconds() : date.getSeconds() - startSecond;\n    const deltaMinutes = date.getMinutes() < startMinute ? date.getMinutes() : date.getMinutes() - startMinute;\n    const deltaHours = date.getHours() < startHour ? date.getHours() : date.getHours() - startHour;\n    const deltaDays =  date.getDate() < startDay ? date.getDate() : date.getDate() - startDay;\n    \n    // Calculates time left in seconds subtracting from exam duration in seconds\n    const examDuration = 30;//30 * 60;       // TODO -> fetch exam duration by user.exam.duration\n    const deltaTime = deltaSeconds + deltaMinutes * 60 + deltaHours * 3600;\n    let timeLeft = examDuration - deltaTime;\n\n    // If more than one day has passed, the time left is definitely over\n    if(deltaDays > 0) \n    {\n        timeLeft = -1;\n    }\n\n    return timeLeft;\n}\n\nfunction ExamTimer()\n{\n    const [date, setDate] = useState(new Date());\n    const user = useSelector(state => state.userData);\n\n    // Calculates exam time left and converts to display format\n    const timeLeft = currentTimeLeft(user);\n    \n    const hoursLeftText = parseInt(timeLeft/3600) < 10 ? `0${parseInt(timeLeft/3600)}`: parseInt(timeLeft/3600);\n    const minutesLeftText = parseInt(timeLeft/60) < 10 ? `0${parseInt(timeLeft/60)}`: parseInt(timeLeft/60);\n    const secondsLeftText = parseInt(timeLeft%60) < 10 ? `0${parseInt(timeLeft%60)}`: parseInt(timeLeft%60);\n    let timeLeftDisplay = `${hoursLeftText}:${minutesLeftText}:${secondsLeftText}`;\n\n    // Updates component every second\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setDate(new Date);\n        }, 1000);\n        \n        return () => clearInterval(interval);\n    }, [date]);\n    \n    const changePage = useChangePage();\n    if(timeLeft < 0) \n    {\n        changePage(WAIT_PAGE_PATH);\n        return;\n    }\n    \n    return <div style={{display: 'block'}}>{timeLeftDisplay}</div>\n}\n\nexport default ExamTimer;\nexport {currentTimeLeft};"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,aAAa,MAAM,wBAAwB;AAClD,SAASC,cAAc,QAAQ,UAAU;;AAEzC;AAAA;AACA,MAAMC,eAAe,GAAIC,IAAI,IAAI;EAE7B,MAAMC,IAAI,GAAG,IAAIC,IAAI,EAAE;EACvB,MAAMC,SAAS,GAAGH,IAAI,CAACI,aAAa;;EAEpC;EACA,MAAMC,SAAS,GAAGC,QAAQ,CAACH,SAAS,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACjE,MAAMC,WAAW,GAAGF,QAAQ,CAACH,SAAS,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACnE,MAAME,WAAW,GAAGH,QAAQ,CAACH,SAAS,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACnE,MAAMG,QAAQ,GAAGJ,QAAQ,CAACH,SAAS,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;EAEhE;EACA,MAAMI,YAAY,GAAGV,IAAI,CAACW,UAAU,EAAE,GAAGH,WAAW,GAAGR,IAAI,CAACW,UAAU,EAAE,GAAGX,IAAI,CAACW,UAAU,EAAE,GAAGH,WAAW;EAC1G,MAAMI,YAAY,GAAGZ,IAAI,CAACa,UAAU,EAAE,GAAGN,WAAW,GAAGP,IAAI,CAACa,UAAU,EAAE,GAAGb,IAAI,CAACa,UAAU,EAAE,GAAGN,WAAW;EAC1G,MAAMO,UAAU,GAAGd,IAAI,CAACe,QAAQ,EAAE,GAAGX,SAAS,GAAGJ,IAAI,CAACe,QAAQ,EAAE,GAAGf,IAAI,CAACe,QAAQ,EAAE,GAAGX,SAAS;EAC9F,MAAMY,SAAS,GAAIhB,IAAI,CAACiB,OAAO,EAAE,GAAGR,QAAQ,GAAGT,IAAI,CAACiB,OAAO,EAAE,GAAGjB,IAAI,CAACiB,OAAO,EAAE,GAAGR,QAAQ;;EAEzF;EACA,MAAMS,YAAY,GAAG,EAAE,CAAC;EACxB,MAAMC,SAAS,GAAGT,YAAY,GAAGE,YAAY,GAAG,EAAE,GAAGE,UAAU,GAAG,IAAI;EACtE,IAAIM,QAAQ,GAAGF,YAAY,GAAGC,SAAS;;EAEvC;EACA,IAAGH,SAAS,GAAG,CAAC,EAChB;IACII,QAAQ,GAAG,CAAC,CAAC;EACjB;EAEA,OAAOA,QAAQ;AACnB,CAAC;AAED,SAASC,SAAS,GAClB;EAAA;EACI,MAAM,CAACrB,IAAI,EAAEsB,OAAO,CAAC,GAAG3B,QAAQ,CAAC,IAAIM,IAAI,EAAE,CAAC;EAC5C,MAAMF,IAAI,GAAGN,WAAW,CAAC8B,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAAC;;EAEjD;EACA,MAAMJ,QAAQ,GAAGtB,eAAe,CAACC,IAAI,CAAC;EAEtC,MAAM0B,aAAa,GAAGpB,QAAQ,CAACe,QAAQ,GAAC,IAAI,CAAC,GAAG,EAAE,GAAI,IAAGf,QAAQ,CAACe,QAAQ,GAAC,IAAI,CAAE,EAAC,GAAEf,QAAQ,CAACe,QAAQ,GAAC,IAAI,CAAC;EAC3G,MAAMM,eAAe,GAAGrB,QAAQ,CAACe,QAAQ,GAAC,EAAE,CAAC,GAAG,EAAE,GAAI,IAAGf,QAAQ,CAACe,QAAQ,GAAC,EAAE,CAAE,EAAC,GAAEf,QAAQ,CAACe,QAAQ,GAAC,EAAE,CAAC;EACvG,MAAMO,eAAe,GAAGtB,QAAQ,CAACe,QAAQ,GAAC,EAAE,CAAC,GAAG,EAAE,GAAI,IAAGf,QAAQ,CAACe,QAAQ,GAAC,EAAE,CAAE,EAAC,GAAEf,QAAQ,CAACe,QAAQ,GAAC,EAAE,CAAC;EACvG,IAAIQ,eAAe,GAAI,GAAEH,aAAc,IAAGC,eAAgB,IAAGC,eAAgB,EAAC;;EAE9E;EACAjC,SAAS,CAAC,MAAM;IACZ,MAAMmC,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/BR,OAAO,CAAC,IAAIrB,IAAI,GAAC;IACrB,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM8B,aAAa,CAACF,QAAQ,CAAC;EACxC,CAAC,EAAE,CAAC7B,IAAI,CAAC,CAAC;EAEV,MAAMgC,UAAU,GAAGpC,aAAa,EAAE;EAClC,IAAGwB,QAAQ,GAAG,CAAC,EACf;IACIY,UAAU,CAACnC,cAAc,CAAC;IAC1B;EACJ;EAEA,oBAAO;IAAK,KAAK,EAAE;MAACoC,OAAO,EAAE;IAAO,CAAE;IAAA,UAAEL;EAAe;IAAA;IAAA;IAAA;EAAA,QAAO;AAClE;AAAC,GA9BQP,SAAS;EAAA,QAGD5B,WAAW,EAmBLG,aAAa;AAAA;AAAA,KAtB3ByB,SAAS;AAgClB,eAAeA,SAAS;AACxB,SAAQvB,eAAe;AAAE;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}