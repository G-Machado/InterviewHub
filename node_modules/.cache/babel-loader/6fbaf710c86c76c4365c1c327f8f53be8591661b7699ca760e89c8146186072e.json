{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { changeUser } from \"../store\";\nimport { useFetchQuestionsQuery, useFetchSubmissionQuery, useFetchUserQuery, setupSubmission, loadQuestionsData, setUserField } from \"../store\";\nimport useSetUserField from \"./useSetUserField\";\nfunction useLoadUser(loginInput) {\n  _s();\n  const dispatch = useDispatch();\n  const [loginError, setLoginError] = useState(false);\n  const fetchUser = useFetchUserQuery(loginInput);\n  const user = useSelector(state => state.userData);\n\n  // Dispatch loaded user data\n  useEffect(() => {\n    if (fetchUser.isFetching || fetchUser.isLoading || fetchUser.error || loginInput == '' || user.id != 0) return;\n    if (fetchUser.isSuccess && fetchUser.data.length <= 0) {\n      setLoginError(true);\n      return;\n    }\n    dispatch(changeUser(fetchUser.data[0]));\n    console.log(fetchUser.data[0]);\n    return;\n  });\n\n  // const fetchSubmission = useFetchSubmissionQuery(user);\n  const fetchQuestions = useFetchQuestionsQuery(user);\n\n  // const setUserField = useSetUserField();\n\n  // // Dispatch loaded submission\n  // useEffect(()=>{\n  //     if(!fetchSubmission.data) return;\n  //     if(!userLogged) return;\n\n  //     // When user is created, so is the submission\n  //     // so we don't need to check for anything\n  //     dispatch(setupSubmission(fetchSubmission.data[0]));\n  //     console.log('loaded submission to slice');\n  //     // console.log(fetchSubmission);\n\n  // }, [fetchSubmission]);\n\n  // Filter and dispatch loaded user questions\n  useEffect(() => {\n    if (!fetchQuestions.data) return;\n    let filteredQuestions = [];\n    fetchQuestions.data.map(question => {\n      user.questionsId.map(id => {\n        if (id == question.id) {\n          filteredQuestions.push(question);\n        }\n      });\n    });\n    dispatch(loadQuestionsData(filteredQuestions));\n    console.log(fetchQuestions);\n    // console.log('loaded filtered questions to slice');\n\n    if (!user.startedExam) {\n      const newDate = new Date();\n      const startTime = `${newDate.getDate()}/${newDate.getMonth() + 1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n      setUserField(\"startedExam\", true);\n      setUserField(\"examStartTime\", startTime);\n    }\n    return;\n  }, [user]);\n  return [fetchUser.isLoading, loginError];\n}\n_s(useLoadUser, \"i9TpImetu0FlIcr3HLVGpZnkQ90=\", false, function () {\n  return [useDispatch, useFetchUserQuery, useSelector, useFetchQuestionsQuery];\n});\nexport default useLoadUser;","map":{"version":3,"names":["useDispatch","useSelector","useEffect","useState","changeUser","useFetchQuestionsQuery","useFetchSubmissionQuery","useFetchUserQuery","setupSubmission","loadQuestionsData","setUserField","useSetUserField","useLoadUser","loginInput","dispatch","loginError","setLoginError","fetchUser","user","state","userData","isFetching","isLoading","error","id","isSuccess","data","length","console","log","fetchQuestions","filteredQuestions","map","question","questionsId","push","startedExam","newDate","Date","startTime","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Hooks/useLoadUser.js"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { changeUser } from \"../store\";\nimport { \n    useFetchQuestionsQuery, \n    useFetchSubmissionQuery,\n    useFetchUserQuery,\n    setupSubmission,\n    loadQuestionsData,\n    setUserField\n} from \"../store\";\nimport useSetUserField from \"./useSetUserField\";\n\nfunction useLoadUser(loginInput)\n{\n    const dispatch = useDispatch();\n    const [loginError, setLoginError] = useState(false);\n    const fetchUser = useFetchUserQuery(loginInput);\n    const user = useSelector(state=>state.userData);\n\n    // Dispatch loaded user data\n    useEffect(() => {\n        if(fetchUser.isFetching  ||\n        fetchUser.isLoading || \n        fetchUser.error || \n        loginInput == '' || \n        user.id != 0) return;\n\n        if(fetchUser.isSuccess && fetchUser.data.length <= 0){\n            setLoginError(true);\n            return;\n        }\n        \n        dispatch(changeUser(fetchUser.data[0]));\n        console.log(fetchUser.data[0]);\n        \n        return;\n    });\n\n    // const fetchSubmission = useFetchSubmissionQuery(user);\n    const fetchQuestions = useFetchQuestionsQuery(user);\n\n\n    // const setUserField = useSetUserField();\n\n    // // Dispatch loaded submission\n    // useEffect(()=>{\n    //     if(!fetchSubmission.data) return;\n    //     if(!userLogged) return;\n        \n    //     // When user is created, so is the submission\n    //     // so we don't need to check for anything\n    //     dispatch(setupSubmission(fetchSubmission.data[0]));\n    //     console.log('loaded submission to slice');\n    //     // console.log(fetchSubmission);\n\n    // }, [fetchSubmission]);\n\n    // Filter and dispatch loaded user questions\n    useEffect(() => {\n        if(!fetchQuestions.data)return;\n        \n        let filteredQuestions = [];\n        fetchQuestions.data.map((question) =>\n        {\n            user.questionsId.map((id) => {\n                if(id == question.id) \n                {\n                    filteredQuestions.push(question);\n                }\n            });\n        })\n\n        dispatch(loadQuestionsData(filteredQuestions));\n        console.log(fetchQuestions);\n        // console.log('loaded filtered questions to slice');\n        \n        if(!user.startedExam)\n        {\n            const newDate = new Date();\n            const startTime = `${newDate.getDate()}/${newDate.getMonth()+1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n\n            setUserField(\"startedExam\", true);\n            setUserField(\"examStartTime\", startTime);\n        }\n\n        return;\n    }, [user]);    \n\n    return [fetchUser.isLoading, loginError];\n}\n\nexport default useLoadUser;"],"mappings":";AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,UAAU;AACrC,SACIC,sBAAsB,EACtBC,uBAAuB,EACvBC,iBAAiB,EACjBC,eAAe,EACfC,iBAAiB,EACjBC,YAAY,QACT,UAAU;AACjB,OAAOC,eAAe,MAAM,mBAAmB;AAE/C,SAASC,WAAW,CAACC,UAAU,EAC/B;EAAA;EACI,MAAMC,QAAQ,GAAGd,WAAW,EAAE;EAC9B,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAMc,SAAS,GAAGV,iBAAiB,CAACM,UAAU,CAAC;EAC/C,MAAMK,IAAI,GAAGjB,WAAW,CAACkB,KAAK,IAAEA,KAAK,CAACC,QAAQ,CAAC;;EAE/C;EACAlB,SAAS,CAAC,MAAM;IACZ,IAAGe,SAAS,CAACI,UAAU,IACvBJ,SAAS,CAACK,SAAS,IACnBL,SAAS,CAACM,KAAK,IACfV,UAAU,IAAI,EAAE,IAChBK,IAAI,CAACM,EAAE,IAAI,CAAC,EAAE;IAEd,IAAGP,SAAS,CAACQ,SAAS,IAAIR,SAAS,CAACS,IAAI,CAACC,MAAM,IAAI,CAAC,EAAC;MACjDX,aAAa,CAAC,IAAI,CAAC;MACnB;IACJ;IAEAF,QAAQ,CAACV,UAAU,CAACa,SAAS,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACvCE,OAAO,CAACC,GAAG,CAACZ,SAAS,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;IAE9B;EACJ,CAAC,CAAC;;EAEF;EACA,MAAMI,cAAc,GAAGzB,sBAAsB,CAACa,IAAI,CAAC;;EAGnD;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACAhB,SAAS,CAAC,MAAM;IACZ,IAAG,CAAC4B,cAAc,CAACJ,IAAI,EAAC;IAExB,IAAIK,iBAAiB,GAAG,EAAE;IAC1BD,cAAc,CAACJ,IAAI,CAACM,GAAG,CAAEC,QAAQ,IACjC;MACIf,IAAI,CAACgB,WAAW,CAACF,GAAG,CAAER,EAAE,IAAK;QACzB,IAAGA,EAAE,IAAIS,QAAQ,CAACT,EAAE,EACpB;UACIO,iBAAiB,CAACI,IAAI,CAACF,QAAQ,CAAC;QACpC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IAEFnB,QAAQ,CAACL,iBAAiB,CAACsB,iBAAiB,CAAC,CAAC;IAC9CH,OAAO,CAACC,GAAG,CAACC,cAAc,CAAC;IAC3B;;IAEA,IAAG,CAACZ,IAAI,CAACkB,WAAW,EACpB;MACI,MAAMC,OAAO,GAAG,IAAIC,IAAI,EAAE;MAC1B,MAAMC,SAAS,GAAI,GAAEF,OAAO,CAACG,OAAO,EAAG,IAAGH,OAAO,CAACI,QAAQ,EAAE,GAAC,CAAE,IAAGJ,OAAO,CAACK,WAAW,EAAG,IAAGL,OAAO,CAACM,QAAQ,EAAG,IAAGN,OAAO,CAACO,UAAU,EAAG,IAAGP,OAAO,CAACQ,UAAU,EAAG,EAAC;MAE/JnC,YAAY,CAAC,aAAa,EAAE,IAAI,CAAC;MACjCA,YAAY,CAAC,eAAe,EAAE6B,SAAS,CAAC;IAC5C;IAEA;EACJ,CAAC,EAAE,CAACrB,IAAI,CAAC,CAAC;EAEV,OAAO,CAACD,SAAS,CAACK,SAAS,EAAEP,UAAU,CAAC;AAC5C;AAAC,GA7EQH,WAAW;EAAA,QAECZ,WAAW,EAEVO,iBAAiB,EACtBN,WAAW,EAsBDI,sBAAsB;AAAA;AAoDjD,eAAeO,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}