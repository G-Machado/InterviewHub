{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setSubmissionDirty, useUpdateSubmissionMutation } from '../store';\nfunction useUploadSubmission() {\n  _s();\n  const user = useSelector(state => state.userData);\n  const userQuestions = useSelector(state => state.questionsData);\n  const [updateSubmission, submitResults] = useUpdateSubmissionMutation();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (user.id == 0) return;\n    if (!user.startedExam) return;\n    console.log(userQuestions);\n    if (userQuestions.isDirty) {} else {\n      let answers = [];\n      userQuestions.data.map(question => {\n        answers.push({\n          id: question.id,\n          answerId: question.userAnswerId || 0\n        });\n      });\n      const submission = {\n        userId: user.id,\n        answers: answers\n      };\n      updateSubmission(submission);\n      console.log(\"Uploaded submission after mutation\");\n      dispatch(setSubmissionDirty({\n        value: false\n      }));\n    }\n  }, [userQuestions]);\n}\n_s(useUploadSubmission, \"4nAbj9FQb0En8BY68Obp8SEpcmI=\", false, function () {\n  return [useSelector, useSelector, useUpdateSubmissionMutation, useDispatch];\n});\nexport default useUploadSubmission;","map":{"version":3,"names":["useEffect","useSelector","useDispatch","setSubmissionDirty","useUpdateSubmissionMutation","useUploadSubmission","user","state","userData","userQuestions","questionsData","updateSubmission","submitResults","dispatch","id","startedExam","console","log","isDirty","answers","data","map","question","push","answerId","userAnswerId","submission","userId","value"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Hooks/useUploadSubmission.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setSubmissionDirty, useUpdateSubmissionMutation } from '../store';\n\nfunction useUploadSubmission()\n{\n    const user = useSelector(state => state.userData);\n    const userQuestions = useSelector((state)=>state.questionsData);\n    const [updateSubmission, submitResults] = useUpdateSubmissionMutation();\n    const dispatch = useDispatch();\n\n    useEffect(()=>{\n        if(user.id == 0) return;\n        if(!user.startedExam) return;\n        console.log(userQuestions);\n        if(userQuestions.isDirty)\n        {\n            \n        }\n        else\n        {\n            let answers = [];\n            userQuestions.data.map((question) =>\n            {\n                answers.push({id: question.id, answerId: question.userAnswerId || 0});\n            })\n            const submission = {userId: user.id, answers: answers};\n            updateSubmission(submission);\n            console.log(\"Uploaded submission after mutation\");\n            dispatch(setSubmissionDirty({value: false}));\n        }\n    }, [userQuestions]);\n}\n\nexport default useUploadSubmission;"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,kBAAkB,EAAEC,2BAA2B,QAAQ,UAAU;AAE1E,SAASC,mBAAmB,GAC5B;EAAA;EACI,MAAMC,IAAI,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAAC;EACjD,MAAMC,aAAa,GAAGR,WAAW,CAAEM,KAAK,IAAGA,KAAK,CAACG,aAAa,CAAC;EAC/D,MAAM,CAACC,gBAAgB,EAAEC,aAAa,CAAC,GAAGR,2BAA2B,EAAE;EACvE,MAAMS,QAAQ,GAAGX,WAAW,EAAE;EAE9BF,SAAS,CAAC,MAAI;IACV,IAAGM,IAAI,CAACQ,EAAE,IAAI,CAAC,EAAE;IACjB,IAAG,CAACR,IAAI,CAACS,WAAW,EAAE;IACtBC,OAAO,CAACC,GAAG,CAACR,aAAa,CAAC;IAC1B,IAAGA,aAAa,CAACS,OAAO,EACxB,CAEA,CAAC,MAED;MACI,IAAIC,OAAO,GAAG,EAAE;MAChBV,aAAa,CAACW,IAAI,CAACC,GAAG,CAAEC,QAAQ,IAChC;QACIH,OAAO,CAACI,IAAI,CAAC;UAACT,EAAE,EAAEQ,QAAQ,CAACR,EAAE;UAAEU,QAAQ,EAAEF,QAAQ,CAACG,YAAY,IAAI;QAAC,CAAC,CAAC;MACzE,CAAC,CAAC;MACF,MAAMC,UAAU,GAAG;QAACC,MAAM,EAAErB,IAAI,CAACQ,EAAE;QAAEK,OAAO,EAAEA;MAAO,CAAC;MACtDR,gBAAgB,CAACe,UAAU,CAAC;MAC5BV,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjDJ,QAAQ,CAACV,kBAAkB,CAAC;QAACyB,KAAK,EAAE;MAAK,CAAC,CAAC,CAAC;IAChD;EACJ,CAAC,EAAE,CAACnB,aAAa,CAAC,CAAC;AACvB;AAAC,GA5BQJ,mBAAmB;EAAA,QAEXJ,WAAW,EACFA,WAAW,EACSG,2BAA2B,EACpDF,WAAW;AAAA;AAyBhC,eAAeG,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}