{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useFetchQuestionsQuery } from \"../store\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setUserField, loadQuestionsData, useLazyFetchQuestionsQuery } from \"../store\";\nimport { useEffect, useState } from \"react\";\nfunction TryLoadUserQuestions() {\n  _s();\n  // const fetchQuestions = useFetchQuestionsQuery();\n  const dispatch = useDispatch();\n  const user = useSelector(state => state.userData);\n  const [fetchQuestions, results] = useLazyFetchQuestionsQuery();\n  const [loaded, setLoaded] = useState(true);\n  const loadQuestions = () => {\n    console.log(results);\n    setLoaded(false);\n  };\n\n  // Filter and dispatch loaded user questions\n  useEffect(() => {\n    if (user.id == 0) return;\n    if (!loaded)\n      //results.isUninitialized) \n      {\n        fetchQuestions();\n        return;\n      }\n    if (!results.isSuccess || results.isUninitialized || results.isFetching) return;\n\n    // if(fetchQuestions.isFetching ||\n    //     fetchQuestions.isLoading ||\n    //     fetchQuestions.error) return;\n\n    setLoaded(false);\n    let filteredQuestions = [];\n    results.data.map(question => {\n      user.questionsId.map(id => {\n        if (id == question.id) {\n          filteredQuestions.push(question);\n        }\n      });\n    });\n    dispatch(loadQuestionsData(filteredQuestions));\n    console.log('loaded filtered questions to slice');\n    console.log(filteredQuestions);\n    if (!user.startedExam) {\n      const newDate = new Date();\n      const startTime = `${newDate.getDate()}/${newDate.getMonth() + 1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n      setUserField(\"startedExam\", true);\n      setUserField(\"examStartTime\", startTime);\n    }\n  });\n  return [loadQuestions, results];\n}\n_s(TryLoadUserQuestions, \"XwrNl5iYGAnfHhiPDVZSlDbSPsQ=\", false, function () {\n  return [useDispatch, useSelector, useLazyFetchQuestionsQuery];\n});\n_c = TryLoadUserQuestions;\nexport default TryLoadUserQuestions;\nvar _c;\n$RefreshReg$(_c, \"TryLoadUserQuestions\");","map":{"version":3,"names":["useFetchQuestionsQuery","useDispatch","useSelector","setUserField","loadQuestionsData","useLazyFetchQuestionsQuery","useEffect","useState","TryLoadUserQuestions","dispatch","user","state","userData","fetchQuestions","results","loaded","setLoaded","loadQuestions","console","log","id","isSuccess","isUninitialized","isFetching","filteredQuestions","data","map","question","questionsId","push","startedExam","newDate","Date","startTime","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Hooks/TryLoadUserQuestions.js"],"sourcesContent":["import { useFetchQuestionsQuery } from \"../store\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setUserField, \n    loadQuestionsData,\n    useLazyFetchQuestionsQuery\n } from \"../store\";\nimport { useEffect, useState } from \"react\";\n\nfunction TryLoadUserQuestions()\n{\n    // const fetchQuestions = useFetchQuestionsQuery();\n    const dispatch = useDispatch();\n    const user = useSelector(state=>state.userData);\n    const [fetchQuestions, results] = useLazyFetchQuestionsQuery();\n    const [loaded, setLoaded] = useState(true);\n    \n    const loadQuestions = () =>\n    {\n        console.log(results);\n        setLoaded(false);\n    }\n\n    // Filter and dispatch loaded user questions\n    useEffect(() => {\n\n        if(user.id == 0) return;\n        if(!loaded)//results.isUninitialized) \n        {\n            fetchQuestions();\n            return;\n        }\n\n        if(!results.isSuccess || \n            results.isUninitialized ||\n            results.isFetching) return;\n        \n        // if(fetchQuestions.isFetching ||\n        //     fetchQuestions.isLoading ||\n        //     fetchQuestions.error) return;\n\n        setLoaded(false);\n        let filteredQuestions = [];\n        results.data.map((question) =>\n        {\n            user.questionsId.map((id) => {\n                if(id == question.id) \n                {\n                    filteredQuestions.push(question);\n                }\n            });\n        })\n    \n        dispatch(loadQuestionsData(filteredQuestions));\n        console.log('loaded filtered questions to slice');\n        console.log(filteredQuestions);\n        \n        if(!user.startedExam)\n        {\n            const newDate = new Date();\n            const startTime = `${newDate.getDate()}/${newDate.getMonth()+1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n    \n            setUserField(\"startedExam\", true);\n            setUserField(\"examStartTime\", startTime);\n        }\n\n    });\n\n    return [loadQuestions, results];\n}\n\nexport default TryLoadUserQuestions;"],"mappings":";AAAA,SAASA,sBAAsB,QAAQ,UAAU;AACjD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,YAAY,EACjBC,iBAAiB,EACjBC,0BAA0B,QACtB,UAAU;AAClB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,oBAAoB,GAC7B;EAAA;EACI;EACA,MAAMC,QAAQ,GAAGR,WAAW,EAAE;EAC9B,MAAMS,IAAI,GAAGR,WAAW,CAACS,KAAK,IAAEA,KAAK,CAACC,QAAQ,CAAC;EAC/C,MAAM,CAACC,cAAc,EAAEC,OAAO,CAAC,GAAGT,0BAA0B,EAAE;EAC9D,MAAM,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE1C,MAAMU,aAAa,GAAG,MACtB;IACIC,OAAO,CAACC,GAAG,CAACL,OAAO,CAAC;IACpBE,SAAS,CAAC,KAAK,CAAC;EACpB,CAAC;;EAED;EACAV,SAAS,CAAC,MAAM;IAEZ,IAAGI,IAAI,CAACU,EAAE,IAAI,CAAC,EAAE;IACjB,IAAG,CAACL,MAAM;MAAC;MACX;QACIF,cAAc,EAAE;QAChB;MACJ;IAEA,IAAG,CAACC,OAAO,CAACO,SAAS,IACjBP,OAAO,CAACQ,eAAe,IACvBR,OAAO,CAACS,UAAU,EAAE;;IAExB;IACA;IACA;;IAEAP,SAAS,CAAC,KAAK,CAAC;IAChB,IAAIQ,iBAAiB,GAAG,EAAE;IAC1BV,OAAO,CAACW,IAAI,CAACC,GAAG,CAAEC,QAAQ,IAC1B;MACIjB,IAAI,CAACkB,WAAW,CAACF,GAAG,CAAEN,EAAE,IAAK;QACzB,IAAGA,EAAE,IAAIO,QAAQ,CAACP,EAAE,EACpB;UACII,iBAAiB,CAACK,IAAI,CAACF,QAAQ,CAAC;QACpC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IAEFlB,QAAQ,CAACL,iBAAiB,CAACoB,iBAAiB,CAAC,CAAC;IAC9CN,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACjDD,OAAO,CAACC,GAAG,CAACK,iBAAiB,CAAC;IAE9B,IAAG,CAACd,IAAI,CAACoB,WAAW,EACpB;MACI,MAAMC,OAAO,GAAG,IAAIC,IAAI,EAAE;MAC1B,MAAMC,SAAS,GAAI,GAAEF,OAAO,CAACG,OAAO,EAAG,IAAGH,OAAO,CAACI,QAAQ,EAAE,GAAC,CAAE,IAAGJ,OAAO,CAACK,WAAW,EAAG,IAAGL,OAAO,CAACM,QAAQ,EAAG,IAAGN,OAAO,CAACO,UAAU,EAAG,IAAGP,OAAO,CAACQ,UAAU,EAAG,EAAC;MAE/JpC,YAAY,CAAC,aAAa,EAAE,IAAI,CAAC;MACjCA,YAAY,CAAC,eAAe,EAAE8B,SAAS,CAAC;IAC5C;EAEJ,CAAC,CAAC;EAEF,OAAO,CAAChB,aAAa,EAAEH,OAAO,CAAC;AACnC;AAAC,GA5DQN,oBAAoB;EAAA,QAGRP,WAAW,EACfC,WAAW,EACUG,0BAA0B;AAAA;AAAA,KALvDG,oBAAoB;AA8D7B,eAAeA,oBAAoB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}