{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useFetchQuestionsQuery } from \"../store\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setUserField, loadQuestionsData, useLazyFetchQuestionsQuery } from \"../store\";\nimport { useEffect, useState } from \"react\";\nfunction TryLoadUserQuestions() {\n  _s();\n  // const fetchQuestions = useFetchQuestionsQuery();\n  const dispatch = useDispatch();\n  const [fetchQuestions, results] = useLazyFetchQuestionsQuery();\n  const user = useSelector(state => state.userData);\n\n  // Filter and dispatch loaded user questions\n  useEffect(() => {\n    if (!user || user.id == 0) return;\n    console.log(results);\n    if (results.isUninitialized) {\n      fetchQuestions();\n      return;\n    }\n    if (!results.isSuccess || results.isUninitialized || results.isFetching) return;\n\n    // if(fetchQuestions.isFetching ||\n    //     fetchQuestions.isLoading ||\n    //     fetchQuestions.error) return;\n\n    let filteredQuestions = [];\n    results.data.map(question => {\n      user.questionsId.map(id => {\n        if (id == question.id) {\n          filteredQuestions.push(question);\n        }\n      });\n    });\n    dispatch(loadQuestionsData(filteredQuestions));\n    console.log('loaded filtered questions to slice');\n    console.log(filteredQuestions);\n    if (!user.startedExam) {\n      const newDate = new Date();\n      const startTime = `${newDate.getDate()}/${newDate.getMonth() + 1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n      setUserField(\"startedExam\", true);\n      setUserField(\"examStartTime\", startTime);\n    }\n  });\n  return [loadQuestions, results];\n}\n_s(TryLoadUserQuestions, \"d8lw+32C7WDpy8MOqvvso/6Dckg=\", false, function () {\n  return [useDispatch, useLazyFetchQuestionsQuery, useSelector];\n});\n_c = TryLoadUserQuestions;\nexport default TryLoadUserQuestions;\nvar _c;\n$RefreshReg$(_c, \"TryLoadUserQuestions\");","map":{"version":3,"names":["useFetchQuestionsQuery","useDispatch","useSelector","setUserField","loadQuestionsData","useLazyFetchQuestionsQuery","useEffect","useState","TryLoadUserQuestions","dispatch","fetchQuestions","results","user","state","userData","id","console","log","isUninitialized","isSuccess","isFetching","filteredQuestions","data","map","question","questionsId","push","startedExam","newDate","Date","startTime","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","loadQuestions"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Hooks/TryLoadUserQuestions.js"],"sourcesContent":["import { useFetchQuestionsQuery } from \"../store\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setUserField, \n    loadQuestionsData,\n    useLazyFetchQuestionsQuery\n } from \"../store\";\nimport { useEffect, useState } from \"react\";\n\nfunction TryLoadUserQuestions()\n{\n    // const fetchQuestions = useFetchQuestionsQuery();\n    const dispatch = useDispatch();\n    const [fetchQuestions, results] = useLazyFetchQuestionsQuery();\n    const user = useSelector(state => state.userData);\n    \n    // Filter and dispatch loaded user questions\n    useEffect(() => {\n\n        if(!user || user.id == 0) return;\n\n        console.log(results);\n        if(results.isUninitialized) \n        {\n            fetchQuestions();\n            return;\n        }\n        \n        if(!results.isSuccess || \n            results.isUninitialized ||\n            results.isFetching) return;\n            \n\n        // if(fetchQuestions.isFetching ||\n        //     fetchQuestions.isLoading ||\n        //     fetchQuestions.error) return;\n\n        let filteredQuestions = [];\n        results.data.map((question) =>\n        {\n            user.questionsId.map((id) => {\n                if(id == question.id) \n                {\n                    filteredQuestions.push(question);\n                }\n            });\n        })\n    \n        dispatch(loadQuestionsData(filteredQuestions));\n        console.log('loaded filtered questions to slice');\n        console.log(filteredQuestions);\n        \n        if(!user.startedExam)\n        {\n            const newDate = new Date();\n            const startTime = `${newDate.getDate()}/${newDate.getMonth()+1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n    \n            setUserField(\"startedExam\", true);\n            setUserField(\"examStartTime\", startTime);\n        }\n\n    });\n\n    return [loadQuestions, results];\n}\n\nexport default TryLoadUserQuestions;"],"mappings":";AAAA,SAASA,sBAAsB,QAAQ,UAAU;AACjD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,YAAY,EACjBC,iBAAiB,EACjBC,0BAA0B,QACtB,UAAU;AAClB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,oBAAoB,GAC7B;EAAA;EACI;EACA,MAAMC,QAAQ,GAAGR,WAAW,EAAE;EAC9B,MAAM,CAACS,cAAc,EAAEC,OAAO,CAAC,GAAGN,0BAA0B,EAAE;EAC9D,MAAMO,IAAI,GAAGV,WAAW,CAACW,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAAC;;EAEjD;EACAR,SAAS,CAAC,MAAM;IAEZ,IAAG,CAACM,IAAI,IAAIA,IAAI,CAACG,EAAE,IAAI,CAAC,EAAE;IAE1BC,OAAO,CAACC,GAAG,CAACN,OAAO,CAAC;IACpB,IAAGA,OAAO,CAACO,eAAe,EAC1B;MACIR,cAAc,EAAE;MAChB;IACJ;IAEA,IAAG,CAACC,OAAO,CAACQ,SAAS,IACjBR,OAAO,CAACO,eAAe,IACvBP,OAAO,CAACS,UAAU,EAAE;;IAGxB;IACA;IACA;;IAEA,IAAIC,iBAAiB,GAAG,EAAE;IAC1BV,OAAO,CAACW,IAAI,CAACC,GAAG,CAAEC,QAAQ,IAC1B;MACIZ,IAAI,CAACa,WAAW,CAACF,GAAG,CAAER,EAAE,IAAK;QACzB,IAAGA,EAAE,IAAIS,QAAQ,CAACT,EAAE,EACpB;UACIM,iBAAiB,CAACK,IAAI,CAACF,QAAQ,CAAC;QACpC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IAEFf,QAAQ,CAACL,iBAAiB,CAACiB,iBAAiB,CAAC,CAAC;IAC9CL,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACjDD,OAAO,CAACC,GAAG,CAACI,iBAAiB,CAAC;IAE9B,IAAG,CAACT,IAAI,CAACe,WAAW,EACpB;MACI,MAAMC,OAAO,GAAG,IAAIC,IAAI,EAAE;MAC1B,MAAMC,SAAS,GAAI,GAAEF,OAAO,CAACG,OAAO,EAAG,IAAGH,OAAO,CAACI,QAAQ,EAAE,GAAC,CAAE,IAAGJ,OAAO,CAACK,WAAW,EAAG,IAAGL,OAAO,CAACM,QAAQ,EAAG,IAAGN,OAAO,CAACO,UAAU,EAAG,IAAGP,OAAO,CAACQ,UAAU,EAAG,EAAC;MAE/JjC,YAAY,CAAC,aAAa,EAAE,IAAI,CAAC;MACjCA,YAAY,CAAC,eAAe,EAAE2B,SAAS,CAAC;IAC5C;EAEJ,CAAC,CAAC;EAEF,OAAO,CAACO,aAAa,EAAE1B,OAAO,CAAC;AACnC;AAAC,GAvDQH,oBAAoB;EAAA,QAGRP,WAAW,EACMI,0BAA0B,EAC/CH,WAAW;AAAA;AAAA,KALnBM,oBAAoB;AAyD7B,eAAeA,oBAAoB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}