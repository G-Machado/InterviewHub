{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { usePostSubmissionMutation, setSubmissionDirty } from '../store';\nfunction useUploadSubmission() {\n  _s();\n  const user = useSelector(state => state.userData);\n  const userQuestions = useSelector(state => state.questionsData);\n  const [updateSubmission, submitResults] = useUpdateSubmissionMutation();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (user.id == 0) return;\n    if (!user.startedExam) return;\n    console.log(userQuestions);\n    if (!userQuestions.isDirty) return;\n    let answers = [];\n    userQuestions.data.map(question => {\n      answers.push({\n        id: question.id,\n        answerId: question.userAnswerId || 0\n      });\n    });\n    const submission = {\n      userId: user.id,\n      answers: answers\n    };\n    updateSubmission(submission);\n    console.log(\"Uploaded submission after mutation\");\n    dispatch(setSubmissionDirty({\n      value: false\n    }));\n  }, [userQuestions]);\n}\n_s(useUploadSubmission, \"4nAbj9FQb0En8BY68Obp8SEpcmI=\", true, function () {\n  return [useSelector, useSelector, useDispatch];\n});\nexport default useUploadSubmission;","map":{"version":3,"names":["useEffect","useSelector","useDispatch","usePostSubmissionMutation","setSubmissionDirty","useUploadSubmission","user","state","userData","userQuestions","questionsData","updateSubmission","submitResults","useUpdateSubmissionMutation","dispatch","id","startedExam","console","log","isDirty","answers","data","map","question","push","answerId","userAnswerId","submission","userId","value"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Hooks/useUploadSubmission.js"],"sourcesContent":["import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { usePostSubmissionMutation, setSubmissionDirty } from '../store';\n\nfunction useUploadSubmission()\n{\n    const user = useSelector(state => state.userData);\n    const userQuestions = useSelector((state)=>state.questionsData);\n    const [updateSubmission, submitResults] = useUpdateSubmissionMutation();\n    const dispatch = useDispatch();\n\n    useEffect(()=>{\n        if(user.id == 0) return;\n        if(!user.startedExam) return;\n        console.log(userQuestions);\n        if(!userQuestions.isDirty)return;\n\n        let answers = [];\n        userQuestions.data.map((question) =>\n        {\n            answers.push({id: question.id, answerId: question.userAnswerId || 0});\n        })\n        const submission = {userId: user.id, answers: answers};\n        updateSubmission(submission);\n        console.log(\"Uploaded submission after mutation\");\n        dispatch(setSubmissionDirty({value: false}));\n    }, [userQuestions]);\n}\n\nexport default useUploadSubmission;"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,yBAAyB,EAAEC,kBAAkB,QAAQ,UAAU;AAExE,SAASC,mBAAmB,GAC5B;EAAA;EACI,MAAMC,IAAI,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAAC;EACjD,MAAMC,aAAa,GAAGR,WAAW,CAAEM,KAAK,IAAGA,KAAK,CAACG,aAAa,CAAC;EAC/D,MAAM,CAACC,gBAAgB,EAAEC,aAAa,CAAC,GAAGC,2BAA2B,EAAE;EACvE,MAAMC,QAAQ,GAAGZ,WAAW,EAAE;EAE9BF,SAAS,CAAC,MAAI;IACV,IAAGM,IAAI,CAACS,EAAE,IAAI,CAAC,EAAE;IACjB,IAAG,CAACT,IAAI,CAACU,WAAW,EAAE;IACtBC,OAAO,CAACC,GAAG,CAACT,aAAa,CAAC;IAC1B,IAAG,CAACA,aAAa,CAACU,OAAO,EAAC;IAE1B,IAAIC,OAAO,GAAG,EAAE;IAChBX,aAAa,CAACY,IAAI,CAACC,GAAG,CAAEC,QAAQ,IAChC;MACIH,OAAO,CAACI,IAAI,CAAC;QAACT,EAAE,EAAEQ,QAAQ,CAACR,EAAE;QAAEU,QAAQ,EAAEF,QAAQ,CAACG,YAAY,IAAI;MAAC,CAAC,CAAC;IACzE,CAAC,CAAC;IACF,MAAMC,UAAU,GAAG;MAACC,MAAM,EAAEtB,IAAI,CAACS,EAAE;MAAEK,OAAO,EAAEA;IAAO,CAAC;IACtDT,gBAAgB,CAACgB,UAAU,CAAC;IAC5BV,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;IACjDJ,QAAQ,CAACV,kBAAkB,CAAC;MAACyB,KAAK,EAAE;IAAK,CAAC,CAAC,CAAC;EAChD,CAAC,EAAE,CAACpB,aAAa,CAAC,CAAC;AACvB;AAAC,GAvBQJ,mBAAmB;EAAA,QAEXJ,WAAW,EACFA,WAAW,EAEhBC,WAAW;AAAA;AAoBhC,eAAeG,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}