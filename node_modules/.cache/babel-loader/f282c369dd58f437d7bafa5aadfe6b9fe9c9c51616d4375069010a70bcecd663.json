{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDispatch } from \"react-redux\";\nimport { changeUser } from \"../store\";\nfunction useLoadUser(loginInput) {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    data,\n    error,\n    isLoading\n  } = useFetchUserQuery(loginInput);\n\n  // Dispatch loaded user data\n  dispatch(changeUser(data));\n\n  // Dispatch loaded submission\n  useEffect(() => {\n    if (!submissionFetch.data || submissionFetch.isLoading || submissionFetch.error) return;\n\n    // When user is created, so is the submission\n    // so we don't need to check for anything\n    dispatch(setupSubmission(submissionFetch.data[0]));\n    return;\n  }, [submissionFetch.data]);\n\n  // Filter and dispatch loaded user questions\n  let filteredQuestions = [];\n  useEffect(() => {\n    if (!data) return;\n\n    // console.log(data);\n    data.map(question => {\n      user.questionsId.map(id => {\n        if (id == question.id) {\n          filteredQuestions.push(question);\n        }\n      });\n    });\n    dispatch(loadQuestionsData(filteredQuestions));\n    if (!user.startedExam) {\n      const newDate = new Date();\n      const startTime = `${newDate.getDate()}/${newDate.getMonth() + 1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n      dispatch(setUserField({\n        key: \"startedExam\",\n        value: true\n      }));\n      dispatch(setUserField({\n        key: \"examStartTime\",\n        value: startTime\n      }));\n    }\n    return;\n  }, [data]);\n}\n_s(useLoadUser, \"z9S/GqA2+h3yrFAtOX5tIVoPKL4=\", true, function () {\n  return [useDispatch];\n});\nexport default useLoadUser;","map":{"version":3,"names":["useDispatch","changeUser","useLoadUser","loginInput","dispatch","data","error","isLoading","useFetchUserQuery","useEffect","submissionFetch","setupSubmission","filteredQuestions","map","question","user","questionsId","id","push","loadQuestionsData","startedExam","newDate","Date","startTime","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","setUserField","key","value"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Hooks/useLoadUser.js"],"sourcesContent":["import { useDispatch } from \"react-redux\";\nimport { changeUser } from \"../store\";\n\nfunction useLoadUser(loginInput)\n{\n    const dispatch = useDispatch();\n    const {data, error, isLoading} = useFetchUserQuery(loginInput);\n\n    // Dispatch loaded user data\n    dispatch(changeUser(data));\n\n    // Dispatch loaded submission\n    useEffect(()=>{\n        if(!submissionFetch.data || \n            submissionFetch.isLoading || \n            submissionFetch.error) return;\n        \n        // When user is created, so is the submission\n        // so we don't need to check for anything\n        dispatch(setupSubmission(submissionFetch.data[0]));\n        return;\n    }, [submissionFetch.data]);\n\n    // Filter and dispatch loaded user questions\n    let filteredQuestions = [];\n    useEffect(() => {\n        if(!data)return;\n\n        // console.log(data);\n        data.map((question) =>\n        {\n            user.questionsId.map((id) => {\n                if(id == question.id) \n                {\n                    filteredQuestions.push(question);\n                }\n            });\n        })\n\n        dispatch(loadQuestionsData(filteredQuestions));\n        \n        if(!user.startedExam)\n        {\n            const newDate = new Date();\n            const startTime = `${newDate.getDate()}/${newDate.getMonth()+1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n            dispatch(setUserField({key:\"startedExam\", value: true}));\n            dispatch(setUserField({key:\"examStartTime\", value: startTime}));\n        }\n        return;\n    }, [data]);    \n}\n\nexport default useLoadUser;"],"mappings":";AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,SAASC,UAAU,QAAQ,UAAU;AAErC,SAASC,WAAW,CAACC,UAAU,EAC/B;EAAA;EACI,MAAMC,QAAQ,GAAGJ,WAAW,EAAE;EAC9B,MAAM;IAACK,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGC,iBAAiB,CAACL,UAAU,CAAC;;EAE9D;EACAC,QAAQ,CAACH,UAAU,CAACI,IAAI,CAAC,CAAC;;EAE1B;EACAI,SAAS,CAAC,MAAI;IACV,IAAG,CAACC,eAAe,CAACL,IAAI,IACpBK,eAAe,CAACH,SAAS,IACzBG,eAAe,CAACJ,KAAK,EAAE;;IAE3B;IACA;IACAF,QAAQ,CAACO,eAAe,CAACD,eAAe,CAACL,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD;EACJ,CAAC,EAAE,CAACK,eAAe,CAACL,IAAI,CAAC,CAAC;;EAE1B;EACA,IAAIO,iBAAiB,GAAG,EAAE;EAC1BH,SAAS,CAAC,MAAM;IACZ,IAAG,CAACJ,IAAI,EAAC;;IAET;IACAA,IAAI,CAACQ,GAAG,CAAEC,QAAQ,IAClB;MACIC,IAAI,CAACC,WAAW,CAACH,GAAG,CAAEI,EAAE,IAAK;QACzB,IAAGA,EAAE,IAAIH,QAAQ,CAACG,EAAE,EACpB;UACIL,iBAAiB,CAACM,IAAI,CAACJ,QAAQ,CAAC;QACpC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IAEFV,QAAQ,CAACe,iBAAiB,CAACP,iBAAiB,CAAC,CAAC;IAE9C,IAAG,CAACG,IAAI,CAACK,WAAW,EACpB;MACI,MAAMC,OAAO,GAAG,IAAIC,IAAI,EAAE;MAC1B,MAAMC,SAAS,GAAI,GAAEF,OAAO,CAACG,OAAO,EAAG,IAAGH,OAAO,CAACI,QAAQ,EAAE,GAAC,CAAE,IAAGJ,OAAO,CAACK,WAAW,EAAG,IAAGL,OAAO,CAACM,QAAQ,EAAG,IAAGN,OAAO,CAACO,UAAU,EAAG,IAAGP,OAAO,CAACQ,UAAU,EAAG,EAAC;MAC/JzB,QAAQ,CAAC0B,YAAY,CAAC;QAACC,GAAG,EAAC,aAAa;QAAEC,KAAK,EAAE;MAAI,CAAC,CAAC,CAAC;MACxD5B,QAAQ,CAAC0B,YAAY,CAAC;QAACC,GAAG,EAAC,eAAe;QAAEC,KAAK,EAAET;MAAS,CAAC,CAAC,CAAC;IACnE;IACA;EACJ,CAAC,EAAE,CAAClB,IAAI,CAAC,CAAC;AACd;AAAC,GA/CQH,WAAW;EAAA,QAECF,WAAW;AAAA;AA+ChC,eAAeE,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}