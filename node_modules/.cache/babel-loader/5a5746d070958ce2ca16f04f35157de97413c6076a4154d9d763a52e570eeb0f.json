{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useFetchQuestionsQuery } from \"../store\";\nimport { useDispatch } from \"react-redux\";\nimport { setUserField, loadQuestionsData } from \"../store\";\nimport { useEffect } from \"react\";\nfunction TryLoadUserQuestions(user) {\n  _s();\n  // const fetchQuestions = useFetchQuestionsQuery();\n  const dispatch = useDispatch();\n  const [fetchQuestions, results] = useLazyFetchQuestionsQuery();\n  const loadQuestions = () => {\n    fetchQuestions();\n  };\n\n  // Filter and dispatch loaded user questions\n  useEffect(() => {\n    console.log(results);\n    if (!results.isSuccess || results.isUninitialized) return;\n\n    // if(fetchQuestions.isFetching ||\n    //     fetchQuestions.isLoading ||\n    //     fetchQuestions.error) return;\n\n    let filteredQuestions = [];\n    fetchQuestions.data.map(question => {\n      user.questionsId.map(id => {\n        if (id == question.id) {\n          filteredQuestions.push(question);\n        }\n      });\n    });\n    dispatch(loadQuestionsData(filteredQuestions));\n    // console.log('loaded filtered questions to slice');\n    // console.log(filteredQuestions);\n\n    if (!user.startedExam) {\n      const newDate = new Date();\n      const startTime = `${newDate.getDate()}/${newDate.getMonth() + 1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n      setUserField(\"startedExam\", true);\n      setUserField(\"examStartTime\", startTime);\n    }\n  }, [results]);\n  return [loadQuestions, results];\n}\n_s(TryLoadUserQuestions, \"837pc1Ufs542jNwhVuVqbeCKj9U=\", true, function () {\n  return [useDispatch];\n});\n_c = TryLoadUserQuestions;\nexport default TryLoadUserQuestions;\nvar _c;\n$RefreshReg$(_c, \"TryLoadUserQuestions\");","map":{"version":3,"names":["useFetchQuestionsQuery","useDispatch","setUserField","loadQuestionsData","useEffect","TryLoadUserQuestions","user","dispatch","fetchQuestions","results","useLazyFetchQuestionsQuery","loadQuestions","console","log","isSuccess","isUninitialized","filteredQuestions","data","map","question","questionsId","id","push","startedExam","newDate","Date","startTime","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Hooks/TryLoadUserQuestions.js"],"sourcesContent":["import { useFetchQuestionsQuery } from \"../store\";\nimport { useDispatch } from \"react-redux\";\nimport { setUserField, loadQuestionsData } from \"../store\";\nimport { useEffect } from \"react\";\n\nfunction TryLoadUserQuestions(user)\n{\n    // const fetchQuestions = useFetchQuestionsQuery();\n    const dispatch = useDispatch();\n\n    const [fetchQuestions, results] = useLazyFetchQuestionsQuery();\n    \n    const loadQuestions = () =>\n    {\n        fetchQuestions();\n    }\n\n    // Filter and dispatch loaded user questions\n    useEffect(() => {\n\n        console.log(results);\n        if(!results.isSuccess || results.isUninitialized) return;\n        \n        // if(fetchQuestions.isFetching ||\n        //     fetchQuestions.isLoading ||\n        //     fetchQuestions.error) return;\n\n        let filteredQuestions = [];\n        fetchQuestions.data.map((question) =>\n        {\n            user.questionsId.map((id) => {\n                if(id == question.id) \n                {\n                    filteredQuestions.push(question);\n                }\n            });\n        })\n    \n        dispatch(loadQuestionsData(filteredQuestions));\n        // console.log('loaded filtered questions to slice');\n        // console.log(filteredQuestions);\n        \n        if(!user.startedExam)\n        {\n            const newDate = new Date();\n            const startTime = `${newDate.getDate()}/${newDate.getMonth()+1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n    \n            setUserField(\"startedExam\", true);\n            setUserField(\"examStartTime\", startTime);\n        }\n        \n    }, [results]);\n\n    return [loadQuestions, results];\n}\n\nexport default TryLoadUserQuestions;"],"mappings":";AAAA,SAASA,sBAAsB,QAAQ,UAAU;AACjD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,YAAY,EAAEC,iBAAiB,QAAQ,UAAU;AAC1D,SAASC,SAAS,QAAQ,OAAO;AAEjC,SAASC,oBAAoB,CAACC,IAAI,EAClC;EAAA;EACI;EACA,MAAMC,QAAQ,GAAGN,WAAW,EAAE;EAE9B,MAAM,CAACO,cAAc,EAAEC,OAAO,CAAC,GAAGC,0BAA0B,EAAE;EAE9D,MAAMC,aAAa,GAAG,MACtB;IACIH,cAAc,EAAE;EACpB,CAAC;;EAED;EACAJ,SAAS,CAAC,MAAM;IAEZQ,OAAO,CAACC,GAAG,CAACJ,OAAO,CAAC;IACpB,IAAG,CAACA,OAAO,CAACK,SAAS,IAAIL,OAAO,CAACM,eAAe,EAAE;;IAElD;IACA;IACA;;IAEA,IAAIC,iBAAiB,GAAG,EAAE;IAC1BR,cAAc,CAACS,IAAI,CAACC,GAAG,CAAEC,QAAQ,IACjC;MACIb,IAAI,CAACc,WAAW,CAACF,GAAG,CAAEG,EAAE,IAAK;QACzB,IAAGA,EAAE,IAAIF,QAAQ,CAACE,EAAE,EACpB;UACIL,iBAAiB,CAACM,IAAI,CAACH,QAAQ,CAAC;QACpC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IAEFZ,QAAQ,CAACJ,iBAAiB,CAACa,iBAAiB,CAAC,CAAC;IAC9C;IACA;;IAEA,IAAG,CAACV,IAAI,CAACiB,WAAW,EACpB;MACI,MAAMC,OAAO,GAAG,IAAIC,IAAI,EAAE;MAC1B,MAAMC,SAAS,GAAI,GAAEF,OAAO,CAACG,OAAO,EAAG,IAAGH,OAAO,CAACI,QAAQ,EAAE,GAAC,CAAE,IAAGJ,OAAO,CAACK,WAAW,EAAG,IAAGL,OAAO,CAACM,QAAQ,EAAG,IAAGN,OAAO,CAACO,UAAU,EAAG,IAAGP,OAAO,CAACQ,UAAU,EAAG,EAAC;MAE/J9B,YAAY,CAAC,aAAa,EAAE,IAAI,CAAC;MACjCA,YAAY,CAAC,eAAe,EAAEwB,SAAS,CAAC;IAC5C;EAEJ,CAAC,EAAE,CAACjB,OAAO,CAAC,CAAC;EAEb,OAAO,CAACE,aAAa,EAAEF,OAAO,CAAC;AACnC;AAAC,GAjDQJ,oBAAoB;EAAA,QAGRJ,WAAW;AAAA;AAAA,KAHvBI,oBAAoB;AAmD7B,eAAeA,oBAAoB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}