{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { changeUser } from \"../store\";\nimport { useFetchQuestionsQuery, useFetchSubmissionQuery, useFetchUserQuery, setupSubmission, loadQuestionsData, setUserField } from \"../store\";\nfunction tryLoginUser(loginInput) {\n  _s();\n  const [userLogged, setUserLogged] = useState(false);\n  const user = useSelector(state => state.userData);\n  const dispatch = useDispatch();\n  const fetchUser = useFetchUserQuery(loginInput);\n  const fetchSubmission = useFetchSubmissionQuery(user);\n  const fetchQuestions = useFetchQuestionsQuery(user);\n  const [loginError, setLoginError] = useState(false);\n\n  // Dispatch loaded submission\n  useEffect(() => {\n    if (!fetchSubmission.data || fetchSubmission.isLoading || fetchSubmission.error) return;\n    if (!userLogged) return;\n\n    // When user is created, so is the submission\n    // so we don't need to check for anything\n    dispatch(setupSubmission(fetchSubmission.data[0]));\n    // console.log('loaded submission to slice');\n    // console.log(fetchSubmission.data[0]);\n\n    return;\n  }, [fetchSubmission.data]);\n\n  // Filter and dispatch loaded user questions\n  useEffect(() => {\n    if (!fetchQuestions.data) return;\n    let filteredQuestions = [];\n    fetchQuestions.data.map(question => {\n      user.questionsId.map(id => {\n        if (id == question.id) {\n          filteredQuestions.push(question);\n        }\n      });\n    });\n    dispatch(loadQuestionsData(filteredQuestions));\n    // console.log('loaded filtered questions to slice');\n    // console.log(filteredQuestions);\n\n    if (!user.startedExam) {\n      const newDate = new Date();\n      const startTime = `${newDate.getDate()}/${newDate.getMonth() + 1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n      dispatch(setUserField({\n        key: \"startedExam\",\n        value: true\n      }));\n      dispatch(setUserField({\n        key: \"examStartTime\",\n        value: startTime\n      }));\n    }\n    return;\n  }, [user]);\n\n  // Dispatch loaded user data\n  useEffect(() => {\n    if (!fetchUser.data || fetchUser.isLoading || fetchUser.error || loginInput == '') return;\n    if (fetchUser.data.length <= 0) {\n      setLoginError(true);\n      return;\n    }\n    dispatch(changeUser(fetchUser.data[0]));\n    setUserLogged(true);\n    return;\n  }, [fetchUser.data]);\n  return [fetchUser.isLoading, loginError];\n}\n_s(tryLoginUser, \"Y0YLF/QTIG4GYrsbjZ+YtznrJqY=\", false, function () {\n  return [useSelector, useDispatch, useFetchUserQuery, useFetchSubmissionQuery, useFetchQuestionsQuery];\n});\nexport default tryLoginUser;","map":{"version":3,"names":["useDispatch","useSelector","useEffect","useState","changeUser","useFetchQuestionsQuery","useFetchSubmissionQuery","useFetchUserQuery","setupSubmission","loadQuestionsData","setUserField","tryLoginUser","loginInput","userLogged","setUserLogged","user","state","userData","dispatch","fetchUser","fetchSubmission","fetchQuestions","loginError","setLoginError","data","isLoading","error","filteredQuestions","map","question","questionsId","id","push","startedExam","newDate","Date","startTime","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","key","value","length"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Hooks/useLoadUser.js"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { changeUser } from \"../store\";\nimport { \n    useFetchQuestionsQuery, \n    useFetchSubmissionQuery,\n    useFetchUserQuery,\n    setupSubmission,\n    loadQuestionsData,\n    setUserField\n} from \"../store\";\n\nfunction tryLoginUser(loginInput)\n{\n    const [userLogged, setUserLogged] = useState(false);\n\n    const user = useSelector(state=>state.userData);\n    const dispatch = useDispatch();\n    const fetchUser = useFetchUserQuery(loginInput);\n    const fetchSubmission = useFetchSubmissionQuery(user);\n    const fetchQuestions = useFetchQuestionsQuery(user);\n\n    const [loginError, setLoginError] = useState(false);\n\n    // Dispatch loaded submission\n    useEffect(()=>{\n        if(!fetchSubmission.data || \n            fetchSubmission.isLoading || \n            fetchSubmission.error) return;\n        if(!userLogged) return;\n        \n        // When user is created, so is the submission\n        // so we don't need to check for anything\n        dispatch(setupSubmission(fetchSubmission.data[0]));\n        // console.log('loaded submission to slice');\n        // console.log(fetchSubmission.data[0]);\n\n        return;\n    }, [fetchSubmission.data]);\n\n    // Filter and dispatch loaded user questions\n    useEffect(() => {\n        if(!fetchQuestions.data)return;\n        \n        let filteredQuestions = [];\n        fetchQuestions.data.map((question) =>\n        {\n            user.questionsId.map((id) => {\n                if(id == question.id) \n                {\n                    filteredQuestions.push(question);\n                }\n            });\n        })\n\n        dispatch(loadQuestionsData(filteredQuestions));\n        // console.log('loaded filtered questions to slice');\n        // console.log(filteredQuestions);\n        \n        if(!user.startedExam)\n        {\n            const newDate = new Date();\n            const startTime = `${newDate.getDate()}/${newDate.getMonth()+1}/${newDate.getFullYear()}-${newDate.getHours()}:${newDate.getMinutes()}:${newDate.getSeconds()}`;\n            dispatch(setUserField({key:\"startedExam\", value: true}));\n            dispatch(setUserField({key:\"examStartTime\", value: startTime}));\n        }\n\n        return;\n    }, [user]);    \n\n    // Dispatch loaded user data\n    useEffect(() => {\n        if(!fetchUser.data ||\n        fetchUser.isLoading || \n        fetchUser.error || \n        loginInput == '') return;\n\n        if(fetchUser.data.length <= 0){\n            setLoginError(true);\n            return;\n        }\n            \n        dispatch(changeUser(fetchUser.data[0]));\n        \n        setUserLogged(true);\n        return;\n    }, [fetchUser.data]);\n\n    return [fetchUser.isLoading, loginError];\n}\n\nexport default tryLoginUser;"],"mappings":";AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,UAAU;AACrC,SACIC,sBAAsB,EACtBC,uBAAuB,EACvBC,iBAAiB,EACjBC,eAAe,EACfC,iBAAiB,EACjBC,YAAY,QACT,UAAU;AAEjB,SAASC,YAAY,CAACC,UAAU,EAChC;EAAA;EACI,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMY,IAAI,GAAGd,WAAW,CAACe,KAAK,IAAEA,KAAK,CAACC,QAAQ,CAAC;EAC/C,MAAMC,QAAQ,GAAGlB,WAAW,EAAE;EAC9B,MAAMmB,SAAS,GAAGZ,iBAAiB,CAACK,UAAU,CAAC;EAC/C,MAAMQ,eAAe,GAAGd,uBAAuB,CAACS,IAAI,CAAC;EACrD,MAAMM,cAAc,GAAGhB,sBAAsB,CAACU,IAAI,CAAC;EAEnD,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;;EAEnD;EACAD,SAAS,CAAC,MAAI;IACV,IAAG,CAACkB,eAAe,CAACI,IAAI,IACpBJ,eAAe,CAACK,SAAS,IACzBL,eAAe,CAACM,KAAK,EAAE;IAC3B,IAAG,CAACb,UAAU,EAAE;;IAEhB;IACA;IACAK,QAAQ,CAACV,eAAe,CAACY,eAAe,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD;IACA;;IAEA;EACJ,CAAC,EAAE,CAACJ,eAAe,CAACI,IAAI,CAAC,CAAC;;EAE1B;EACAtB,SAAS,CAAC,MAAM;IACZ,IAAG,CAACmB,cAAc,CAACG,IAAI,EAAC;IAExB,IAAIG,iBAAiB,GAAG,EAAE;IAC1BN,cAAc,CAACG,IAAI,CAACI,GAAG,CAAEC,QAAQ,IACjC;MACId,IAAI,CAACe,WAAW,CAACF,GAAG,CAAEG,EAAE,IAAK;QACzB,IAAGA,EAAE,IAAIF,QAAQ,CAACE,EAAE,EACpB;UACIJ,iBAAiB,CAACK,IAAI,CAACH,QAAQ,CAAC;QACpC;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;IAEFX,QAAQ,CAACT,iBAAiB,CAACkB,iBAAiB,CAAC,CAAC;IAC9C;IACA;;IAEA,IAAG,CAACZ,IAAI,CAACkB,WAAW,EACpB;MACI,MAAMC,OAAO,GAAG,IAAIC,IAAI,EAAE;MAC1B,MAAMC,SAAS,GAAI,GAAEF,OAAO,CAACG,OAAO,EAAG,IAAGH,OAAO,CAACI,QAAQ,EAAE,GAAC,CAAE,IAAGJ,OAAO,CAACK,WAAW,EAAG,IAAGL,OAAO,CAACM,QAAQ,EAAG,IAAGN,OAAO,CAACO,UAAU,EAAG,IAAGP,OAAO,CAACQ,UAAU,EAAG,EAAC;MAC/JxB,QAAQ,CAACR,YAAY,CAAC;QAACiC,GAAG,EAAC,aAAa;QAAEC,KAAK,EAAE;MAAI,CAAC,CAAC,CAAC;MACxD1B,QAAQ,CAACR,YAAY,CAAC;QAACiC,GAAG,EAAC,eAAe;QAAEC,KAAK,EAAER;MAAS,CAAC,CAAC,CAAC;IACnE;IAEA;EACJ,CAAC,EAAE,CAACrB,IAAI,CAAC,CAAC;;EAEV;EACAb,SAAS,CAAC,MAAM;IACZ,IAAG,CAACiB,SAAS,CAACK,IAAI,IAClBL,SAAS,CAACM,SAAS,IACnBN,SAAS,CAACO,KAAK,IACfd,UAAU,IAAI,EAAE,EAAE;IAElB,IAAGO,SAAS,CAACK,IAAI,CAACqB,MAAM,IAAI,CAAC,EAAC;MAC1BtB,aAAa,CAAC,IAAI,CAAC;MACnB;IACJ;IAEAL,QAAQ,CAACd,UAAU,CAACe,SAAS,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAEvCV,aAAa,CAAC,IAAI,CAAC;IACnB;EACJ,CAAC,EAAE,CAACK,SAAS,CAACK,IAAI,CAAC,CAAC;EAEpB,OAAO,CAACL,SAAS,CAACM,SAAS,EAAEH,UAAU,CAAC;AAC5C;AAAC,GA7EQX,YAAY;EAAA,QAIJV,WAAW,EACPD,WAAW,EACVO,iBAAiB,EACXD,uBAAuB,EACxBD,sBAAsB;AAAA;AAuEjD,eAAeM,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}