{"ast":null,"code":"var _jsxFileName = \"/Users/machadogomes/Documents/InterviewHub/question_hub/src/Components/ExamTimer.js\",\n  _s = $RefreshSig$();\nimport { useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\n\n// Calculates and returns total exam time left in seconds\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst currentTimeLeft = user => {\n  const date = new Date();\n  const startTime = user.examStartTime;\n\n  // Parse exam start time\n  const startHour = parseInt(startTime.split(\"-\")[1].split(\":\")[0]);\n  const startMinute = parseInt(startTime.split(\"-\")[1].split(\":\")[1]);\n  const startSecond = parseInt(startTime.split(\"-\")[1].split(\":\")[2]);\n  const startDay = parseInt(startTime.split(\"-\")[0].split(\"/\")[0]);\n\n  // Calculates time spent\n  const deltaSeconds = date.getSeconds() < startSecond ? date.getSeconds() : date.getSeconds() - startSecond;\n  const deltaMinutes = date.getMinutes() < startMinute ? date.getMinutes() : date.getMinutes() - startMinute;\n  const deltaHours = date.getHours() < startHour ? date.getHours() : date.getHours() - startHour;\n  const deltaDays = date.getDate() < startDay ? date.getDate() : date.getDate() - startDay;\n\n  // Calculates time left in seconds subtracting from exam duration in seconds\n  const examDuration = 30 * 60; // TODO -> fetch exam duration by user.exam.duration\n  const deltaTime = deltaSeconds + deltaMinutes * 60 + deltaHours * 3600;\n  const timeLeft = examDuration - deltaTime;\n\n  // If more than one day has passed, the time left is definitely over\n  if (deltaDays > 0) timeLeft = -1;\n  return timeLeft;\n};\nfunction ExamTimer(_ref) {\n  _s();\n  let {\n    handleTimeOver\n  } = _ref;\n  const [date, setDate] = useState(new Date());\n  const user = useSelector(state => state.userData);\n\n  // Calculates exam time left and converts to display format\n  const timeLeft = currentTimeLeft(user);\n  let timeLeftDisplay = `${parseInt(timeLeft / 3600)}:${parseInt(timeLeft / 60)}:${parseInt(timeLeft % 60)}`;\n\n  // Updates component every second\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDate(new Date());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [date]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: timeLeftDisplay\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 12\n  }, this);\n}\n_s(ExamTimer, \"EFELX1dg8jpKbOUphY/2O6RCjOI=\", false, function () {\n  return [useSelector];\n});\n_c = ExamTimer;\nexport default ExamTimer;\nexport { currentTimeLeft };\nvar _c;\n$RefreshReg$(_c, \"ExamTimer\");","map":{"version":3,"names":["useSelector","useEffect","useState","currentTimeLeft","user","date","Date","startTime","examStartTime","startHour","parseInt","split","startMinute","startSecond","startDay","deltaSeconds","getSeconds","deltaMinutes","getMinutes","deltaHours","getHours","deltaDays","getDate","examDuration","deltaTime","timeLeft","ExamTimer","handleTimeOver","setDate","state","userData","timeLeftDisplay","interval","setInterval","clearInterval"],"sources":["/Users/machadogomes/Documents/InterviewHub/question_hub/src/Components/ExamTimer.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\n\n// Calculates and returns total exam time left in seconds\nconst currentTimeLeft = (user)=> {\n       \n\n    const date = new Date();\n    const startTime = user.examStartTime;\n    \n    // Parse exam start time\n    const startHour = parseInt(startTime.split(\"-\")[1].split(\":\")[0]);\n    const startMinute = parseInt(startTime.split(\"-\")[1].split(\":\")[1]);\n    const startSecond = parseInt(startTime.split(\"-\")[1].split(\":\")[2]);\n    const startDay = parseInt(startTime.split(\"-\")[0].split(\"/\")[0]);\n    \n    // Calculates time spent\n    const deltaSeconds = date.getSeconds() < startSecond ? date.getSeconds() : date.getSeconds() - startSecond;\n    const deltaMinutes = date.getMinutes() < startMinute ? date.getMinutes() : date.getMinutes() - startMinute;\n    const deltaHours = date.getHours() < startHour ? date.getHours() : date.getHours() - startHour;\n    const deltaDays =  date.getDate() < startDay ? date.getDate() : date.getDate() - startDay;\n    \n    // Calculates time left in seconds subtracting from exam duration in seconds\n    const examDuration = 30 * 60;       // TODO -> fetch exam duration by user.exam.duration\n    const deltaTime = deltaSeconds + deltaMinutes * 60 + deltaHours * 3600;\n    const timeLeft = examDuration - deltaTime;\n\n    // If more than one day has passed, the time left is definitely over\n    if(deltaDays > 0) \n        timeLeft = -1;\n\n    return timeLeft;\n}\n\nfunction ExamTimer({handleTimeOver})\n{\n    const [date, setDate] = useState(new Date());\n    const user = useSelector(state => state.userData);\n\n    // Calculates exam time left and converts to display format\n    const timeLeft = currentTimeLeft(user);\n    let timeLeftDisplay = `${parseInt(timeLeft/3600)}:${parseInt(timeLeft/60)}:${parseInt(timeLeft%60)}`;\n\n    // Updates component every second\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setDate(new Date);\n        }, 1000);\n        \n        return () => clearInterval(interval);\n    }, [date]);\n    \n    return <div>{timeLeftDisplay}</div>\n}\n\nexport default ExamTimer;\nexport {currentTimeLeft};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}